<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>其他 - 分类 - JallenLau</title>
        <link>https://jallenlau.github.io/categories/other/</link>
        <description>其他 - 分类 - JallenLau</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>jallenlau@protonmail.com (JallenLau)</managingEditor>
            <webMaster>jallenlau@protonmail.com (JallenLau)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 03 May 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://jallenlau.github.io/categories/other/" rel="self" type="application/rss+xml" /><item>
    <title>OpenWrt、OpenClash 安装教程</title>
    <link>https://jallenlau.github.io/openwrt_install/</link>
    <pubDate>Sun, 03 May 2020 00:00:00 &#43;0000</pubDate>
    <author>JallenLau</author>
    <guid>https://jallenlau.github.io/openwrt_install/</guid>
    <description><![CDATA[<p>OpenWrt + OpenClash 安装步骤</p>
<h2 id="溯源">溯源</h2>
<p>由于软路由 LEDE/OpenWrt 系统的问题日渐显现，改刷 OpenWrt。<br>
在此记录安装步骤。</p>
<h2 id="准备">准备</h2>
<h3 id="工具软件">工具软件</h3>
<ul>
<li><a href="https://m0n0.ch/wall/physdiskwrite.php" target="_blank" rel="noopener noreffer">physdiskwrite（系统写入工具）</a></li>
<li><a href="https://www.putty.org/" target="_blank" rel="noopener noreffer">PuTTY（SSH 远程工具）</a></li>
<li><a href="https://winscp.net/eng/download.php" target="_blank" rel="noopener noreffer">WinSCP（远程文件管理工具）</a></li>
<li><a href="http://www.laomaotao.org/" target="_blank" rel="noopener noreffer">老毛桃（启动盘制作工具）</a></li>
</ul>
<blockquote>
<p>任何启动盘制作工具均可</p>
</blockquote>
<h3 id="软路由固件包">软路由固件包</h3>
<ul>
<li><a href="https://www.right.com.cn/forum/index.php" target="_blank" rel="noopener noreffer">恩山论坛（OpenWrt 可自行编译、也可找编译好的包）</a></li>
</ul>
<h3 id="clash-项目地址">Clash 项目地址</h3>
<ul>
<li><a href="https://github.com/vernesong/OpenClash" target="_blank" rel="noopener noreffer">OpenClash 项目地址</a></li>
<li><a href="https://github.com/frainzy1477/luci-app-clash" target="_blank" rel="noopener noreffer">Luci For Clash 项目地址</a></li>
</ul>
<h2 id="步骤">步骤</h2>
<h3 id="安装-openwrt">安装 OpenWrt</h3>
<ol>
<li>先自行制作 PE 启动盘，可用老毛桃，也可采用其他方式。</li>
<li>下载好 physdiskwrite 工具、OpenWrt 镜像安装包，并全部拷贝至启动盘根目录。</li>
<li>将软路由连接显示器、键鼠、U 盘。</li>
<li>设置 U 盘启动，进入 PE 系统，并在分区管理工具内删除软路由固态硬盘<strong>所有分区</strong>并保存（不要设置新的分区，保持整个磁盘空闲状态）。</li>
<li>打开 cmd 命令，输入 PE 启动盘所在盘符号（以下是范例）：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">U:
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="6">
<li>输入以下代码（XXX 替换为 OpenWrt 的安装包全名）：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">physdiskwrite -u XXXX.img
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="7">
<li>输入软路由的磁盘数字（一般为 0）并确认安装：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">0 #之后按回车键
</span></span><span class="line"><span class="cl">y #之后按回车键（确认安装）
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="8">
<li>安装完毕后拔掉 U 盘并重启软路由，同时设置软路由硬盘启动。</li>
</ol>
<blockquote>
<ul>
<li>等待屏幕不再滚动代码后，按回车键</li>
<li>输入：<code>vi /etc/config/network</code></li>
<li>自行更改 LAN 口 IP 地址和 WAN、LAN 的分配网口（涉及 Linux 基础，此处不再赘述，不懂可以略过）</li>
</ul>
</blockquote>
<ol start="9">
<li>连接 LAN 口到计算机，浏览器地址栏输入更改后的 IP，如果略过了上方引言步骤，此处 IP 地址只能输入 <code>192.168.1.1</code>，初始密码是：<code>password</code>。</li>
<li>自行设置软路由的网络。</li>
</ol>
<h2 id="安装依赖">安装依赖</h2>
<ol>
<li>打开 PuTTY，输入软路由的 IP，选择 SSH 模式，进入。</li>
<li>安装依赖：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cd /tmp
</span></span><span class="line"><span class="cl">opkg update
</span></span><span class="line"><span class="cl">opkg install luci
</span></span><span class="line"><span class="cl">opkg install luci-base
</span></span><span class="line"><span class="cl">opkg install iptables
</span></span><span class="line"><span class="cl">opkg install dnsmasq-full
</span></span><span class="line"><span class="cl">opkg install coreutils
</span></span><span class="line"><span class="cl">opkg install coreutils-nohup
</span></span><span class="line"><span class="cl">opkg install bash
</span></span><span class="line"><span class="cl">opkg install curl
</span></span><span class="line"><span class="cl">opkg install jsonfilter
</span></span><span class="line"><span class="cl">opkg install ca-certificates
</span></span><span class="line"><span class="cl">opkg install ipset
</span></span><span class="line"><span class="cl">opkg install ip-full
</span></span><span class="line"><span class="cl">opkg install iptables-mod-tproxy
</span></span><span class="line"><span class="cl">opkg install kmod-tun  #TUN模式
</span></span><span class="line"><span class="cl">opkg install luci-compat
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>打开 WinSCP，文件协议选择 SCP，输入软路由的 IP，输入用户名密码，进入。</li>
<li>找到 OpenClash 的 ipk 安装包，右键上传到软路由的 tmp 文件夹内。</li>
<li>回到命令行，输入（xxx 替换为安装包全名）：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">opkg install xxx.ipk
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="6">
<li>回到软路由页面，刷新，看见<strong>服务</strong>选项卡出现 OpenClash 表示安装成功。</li>
</ol>
<h2 id="总结">总结</h2>
<ol>
<li>Luci for Clash 安装方法类似，不再赘述。</li>
<li>Clash 安装后具体用法请参考具体配置说明：<a href="https://github.com/vernesong/OpenClash/wiki" target="_blank" rel="noopener noreffer">OpenClash wiki</a>。</li>
</ol>
<h2 id="附录">附录</h2>
<ul>
<li><a href="https://github.com/lhie1/Rules/tree/master" target="_blank" rel="noopener noreffer">lhie1 Rules 项目地址</a></li>
<li><a href="https://fndroid.github.io/clash-config-builder/" target="_blank" rel="noopener noreffer">Clash Config Builder</a></li>
<li><a href="https://github.com/Fndroid/clash-config-builder/blob/master/README.md" target="_blank" rel="noopener noreffer">Clash Config Builder wiki</a></li>
</ul>]]></description>
</item>
<item>
    <title>树莓派 4B 完美实现音乐无损串流</title>
    <link>https://jallenlau.github.io/raspberry_music/</link>
    <pubDate>Sun, 23 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>JallenLau</author>
    <guid>https://jallenlau.github.io/raspberry_music/</guid>
    <description><![CDATA[<p>利用树莓派低功耗、低噪音、免关机的特性，针对有聆听无损音乐且鄙夷繁杂操作等需求的用户打造一台方便的无损音乐串流器。</p>
<h2 id="溯源">溯源</h2>
<p>现在到了无损音乐贩售厂家都开始做流媒体的时代了，所以享受高品质音乐的同时，便捷性也成为关注点。毅然决然卖掉了 Sony zx300 播放器，入了个 xDuoo 出的新款解码耳放，想着利用手里闲置的那台安卓手机实现流媒体无损串流。只可惜安卓系统虽然从 Android N 时代就宣布手机 USB 传输音频支持动态采样率，可到了 Android 10 时代发现，输出采样只会锁定 48kHz、192kHz、384kHz。不巧的是，我的解码耳放当输入手机强制重采样为 192kHz 的音乐时，持续产生爆破音。头疼的刷了多个类原生系统以及 MIUI 系统（只支持 48kHz 采样）都无法解决问题。迫于贫穷没法买一台 iPhone 作为音乐转盘，由此考虑利用树莓派低功耗、低噪音、免关机的特性，借助国外开发者的固件实现流媒体整合传输并保证无损的功能。</p>
<h2 id="采用固件">采用固件</h2>
<h3 id="volumio">Volumio</h3>
<p>利用国外的 volumio 固件进行功能实现，可以将音频直接通过 USB 接口数字传输到 DAC 解码设备，不经过系统 SRC 处理，保证了音频文件的原位深、源采样率。</p>
<p><strong>经过本人亲自体验总结以下使用特性：</strong></p>
<ul>
<li>支持本地存储、局域网读取、NAS</li>
<li>通过插件支持 Spotify 无缝串流（最高320kbps）</li>
<li>One Drive 云盘读取私人音乐库（操作很迟钝，操作不人性）</li>
<li>Tidal、Qobuz 无损音乐串流（付费功能，且只能在后台操作页面选择歌曲或者官方 app）</li>
<li>支持 DSD 原生传输或经过系统 PCM 传输 DoP</li>
<li>支持无损 FLAC 电台播放功能</li>
<li>支持 DLNA、miniDLNA、AirPlay</li>
</ul>
<h3 id="moode推荐">moOde（推荐）</h3>
<p>利用国外的 moOde 固件进行功能实现，可以将音频直接通过 USB 接口数字传输到 DAC 解码设备，不经过系统 SRC 处理，保证了音频文件的原位深、源采样率，支持，操作页面更专业化，更美观。</p>
<p><strong>经过本人亲自体验总结以下使用特性：</strong></p>
<ul>
<li>支持本地存储、局域网读取、NAS</li>
<li>通过插件支持 Spotify 无缝串流（最高320kbps）</li>
<li>支持 UPnP （Tidal、Qobuz、One Drive、Google Drive 等音乐通过手机 UPnP 软件统一操控，软件选择性广泛且十分方便，除 Tidal 只能 16-44.1 FLAC 传输，Qobuz 最高支持 24-192 FLAC 传输，云盘内直接原文件传输）</li>
<li>支持 DSD 原生传输</li>
<li>支持 DLNA、miniDLNA、AirPlay</li>
</ul>
<h2 id="所需设备及固件">所需设备及固件</h2>
<ul>
<li><a href="https://www.balena.io/etcher/" target="_blank" rel="noopener noreffer">Etcher</a> 镜像烧录工具</li>
<li><a href="https://volumio.org/" target="_blank" rel="noopener noreffer">Volumio</a> 下载适配 Raspberry 固件</li>
<li><a href="https://moodeaudio.org/" target="_blank" rel="noopener noreffer">moOde</a> 下载适配 Raspberry 固件</li>
<li>Micro-SD 16GB 内存卡（容量足矣）</li>
<li>读卡器</li>
<li>树莓派 4B（具备无线网卡款）</li>
<li>xDuoo XD-05 DAC 解码耳放（自选）</li>
</ul>
<h2 id="步骤">步骤</h2>
<h3 id="volumio-安装过程">Volumio 安装过程</h3>
<ul>
<li>烧录前将卡格式化为 FAT32 格式，利用 Etcher 将 Volumio 固件烧录到 Micro-SD 卡内。</li>
<li>将卡插入树莓派，开机。</li>
<li>输入用户名：volumio ，密码：volumio</li>
<li>打开电脑搜索名称为 Volumio 的 WiFi ，输入密码：volumio2 连接。</li>
<li>依次按照提示操作，并连接无线网络。</li>
<li>用同一无线网下的设备登录 <a href="" rel="">http://volumio.local</a> ,即可享受聆听。</li>
<li>若选择连接有线网络，则保证在同一网段的情况下，登录树莓派所在 IP 地址。</li>
</ul>
<h3 id="moode-安装过程">moOde 安装过程</h3>
<ul>
<li>烧录前将卡格式化为 FAT32 格式，利用 Etcher 将 moOde 固件烧录到 Micro-SD 卡内。</li>
<li>将卡插入树莓派，开机。</li>
<li>打开电脑搜索名称为 moode 的 WiFi ，输入密码：moodeaudio 连接。</li>
<li>依次按照提示操作，并连接无线网络。</li>
<li>用同一无线网下的设备登录 <a href="" rel="">http://moode.local</a> ,即可享受聆听。</li>
<li>若选择连接有线网络，则保证在同一网段的情况下，登录树莓派所在 IP 地址。</li>
</ul>]]></description>
</item>
<item>
    <title>创建 GitHub Pages &amp; 自定域名教程</title>
    <link>https://jallenlau.github.io/bulid_blog_github/</link>
    <pubDate>Tue, 11 Jun 2019 17:55:28 &#43;0800</pubDate>
    <author>JallenLau</author>
    <guid>https://jallenlau.github.io/bulid_blog_github/</guid>
    <description><![CDATA[<p>本文详细介绍利用 Github Pages 搭建个人博客，以及自定义域名步骤。</p>
<h2 id="建立-github-pages">建立 GitHub Pages</h2>
<h3 id="第一步">第一步</h3>
<p>建立 <a href="www.github.com" rel="">GitHub</a> 账户</p>
<h3 id="第二步">第二步</h3>
<h4 id="首先">首先</h4>
<p>进入主页点击右上角 + 号，建立 New Repository。
</p>
<h4 id="其次">其次</h4>
<p>Repository name 填写 <code>username.github.io</code>，此处注意 <code>username</code> 部分一定需要与你的用户名相同。
</p>
<h4 id="最后">最后</h4>
<p>勾选 Initialize this repository with a README，然后点击 Create repository。
</p>
<h3 id="第三步">第三步</h3>
<h4 id="首先-1">首先</h4>
<p>进入建立完成的项目主页，点击右上角的 Settings。
</p>
<h4 id="其次-1">其次</h4>
<p>找到 GitHub Pages，点击 Choose theme 选择一个主题后点击确认，选择完毕之后  GitHub Pages 就会自动帮你生成好网站，在他跳转的界面点击 Commit changes 按钮，网站就可以访问了。
</p>
<h4 id="最后-1">最后</h4>
<p>在浏览器内直接输入 <code>username.github.io</code>，如果成功打开页面即成功完成 Pages 的建立。</p>
<h2 id="自定域名">自定域名</h2>
<h3 id="第一步-1">第一步</h3>
<p>自行购买一个域名，如本人在 Google 购买的域名 <code>marasati.com</code>。</p>
<h3 id="第二步-1">第二步</h3>
<h4 id="域名为-usernamecom类的根域名">域名为 <code>username.com</code>类的根域名</h4>
<p>打开域名供应商网站,将自定 DNS 资源处增加记录。
打开 Linux，运行代码 <code>ping username.github.io</code> 得到 IP 地址并将其复制。
增加两条记录：</p>
<blockquote>
<ul>
<li>名称默认 @，类型 A，TTL 输入600（10m），IPv4地址填写刚刚复制的 IP 地址</li>
<li>名称 www，类型 CNAME，TTL 输入600（10m），IPv4地址填写 <code>username.github.io</code>
</li>
</ul>
</blockquote>
<h4 id="域名为-grusmyoulife-类的子域名">域名为 <code>grus.myou.life</code> 类的子域名</h4>
<p>打开域名供应商网站,将自定 DNS 资源处增加两条记录：</p>
<blockquote>
<ul>
<li>名称 grus，类型 CNAME，TTL 输入600（10m），IPv4地址填写 <code>username.github.io</code></li>
<li>名称 www，类型 CNAME，TTL 输入600（10m），IPv4地址填写 <code>username.github.io</code></li>
</ul>
</blockquote>
<h3 id="第三步-1">第三步</h3>
<p>回到 GitHub 所建项目的 Settings，下滑找到 Github Pages，在 Custom domain 内填入购买的域名后点击 Save，下方 enforce https 是否勾选自行选择。</p>
<h3 id="建立完成">建立完成</h3>]]></description>
</item>
</channel>
</rss>
