<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>安卓 - 分类 - JallenLau</title>
        <link>https://jallenlau.github.io/categories/android/</link>
        <description>安卓 - 分类 - JallenLau</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>jallenlau@protonmail.com (JallenLau)</managingEditor>
            <webMaster>jallenlau@protonmail.com (JallenLau)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 10 Jun 2019 21:40:32 &#43;0800</lastBuildDate><atom:link href="https://jallenlau.github.io/categories/android/" rel="self" type="application/rss+xml" /><item>
    <title>安卓手机刷入 GSI 镜像教程</title>
    <link>https://jallenlau.github.io/android_flash-gsi-rom/</link>
    <pubDate>Mon, 10 Jun 2019 21:40:32 &#43;0800</pubDate>
    <author>JallenLau</author>
    <guid>https://jallenlau.github.io/android_flash-gsi-rom/</guid>
    <description><![CDATA[<p>从理论上来说，刷入某个 GSI，你的手机就会摇身一变，从一个系统切换到了另一个系统。</p>
<h2 id="一gsi-镜像包介绍">一、gsi 镜像包介绍</h2>
<p>GSI 的全称是 Generic System Image，翻译过来就是「通用系统镜像」，这个概念来源于 Project Treble。 自从 Android 8 引入 Project Treble 后，手机的系统文件和底层的厂商硬件驱动开始分离存放，更新系统时只需要更新系统文件即可。此项举措意在方便厂商加快 Android 大版本更新的步伐，自然也同样方便了第三方 ROM 的开发和更新，成为了社区开发的一大福音。从理论上来说，刷入某个 GSI，你的手机就会摇身一变，从一个系统切换到了另一个系统。</p>
<h2 id="二gsi-镜像通刷包的特点">二、gsi 镜像通刷包的特点</h2>
<p>优点是在机器还没有适配第三方 ROM 的时候，可以提前体验到类原生系统，体验原生系统的流畅简洁以及丰富的自定义。但同样存在不小的问题，由于此类镜像包没有针对具体机型进行优化，所以会存在部分问题，例如小米手机的四角弧度过大，gsi 镜像包刷入后状态栏会有不匹配，显示不完全的可能性以及相机无法拍照，即使可以拍照，相片质量也堪忧。</p>
<h2 id="三gsi镜像包的刷入选择">三、gsi镜像包的刷入选择</h2>
<p>gsi通刷包有很多种选择，也是由不同的国外大神负责维护，下面贴上几乎所有 gsi 通刷包（包括官方和非官方）的集合链接，请各位自行选择，选择包的种类请见下一章节。</p>
<p><a href="https://github.com/phhusson/treble_experimentations/wiki/Generic-System-Image-%28GSI%29-list" target="_blank" rel="noopener noreffer">点此跳转GitHub</a></p>
<h2 id="四gsi镜像包类名的选择两类">四、gsi镜像包类名的选择（两类）</h2>
<h3 id="出厂安卓版本是80及以下的手机">出厂安卓版本是8.0及以下的手机</h3>
<h4 id="第一步">第一步</h4>
<p>需要下载一个软件 Treble Check 检测，附上谷歌商店和酷安链接。</p>
<p><a href="https://play.google.com/store/apps/details?id=com.kevintresuelo.treble" target="_blank" rel="noopener noreffer">Treble Check（点击跳转Google play store）</a></p>
<p><a href="https://www.coolapk.com/apk/com.kevintresuelo.treble" target="_blank" rel="noopener noreffer">Treble Check（点击跳转酷安应用市场）</a></p>
<h4 id="第二步">第二步</h4>
<p>打开软件查看检测结果，只有当 <strong>Project Treble</strong> 通过检测才表明此手机可以刷 gsi 镜像包。接着看第二项 <strong>Seamless System Updates</strong>，如果显示 <strong>A/B</strong> 即表明你应该选择的通刷包后缀名为 <em>A/B</em> 或者 <em>AB</em> 。若检测结果显示 <strong>A only</strong>，即表明你应该选择的通刷包后缀名为 <em>A</em> 或者 <em>A only</em>。</p>
<h4 id="第三步">第三步</h4>
<p>上网查找你所使用手机的内核名称，例如小米 9 SE 为 <strong>arm64</strong></p>
<h3 id="出厂版本是安卓90版本的手机第二步关键">出厂版本是安卓9.0版本的手机（第二步关键）</h3>
<h4 id="第一步-1">第一步</h4>
<p>同上第一步，需要检测 <strong>Project Treble</strong> 是否支持</p>
<h4 id="第二步-1">第二步</h4>
<p>此处注意！凡是出厂版本为 9.0 的手机，无论 <strong>Seamless System Updates</strong> 检测结果如何，通刷包的版本一律选择 <strong>A/B</strong> 或 <strong>AB</strong>。</p>
<h4 id="第三步-1">第三步</h4>
<p>同上第三步。</p>
<h2 id="五刷机步骤">五、刷机步骤</h2>
<h3 id="自行完成">自行完成</h3>
<p>自行刷入第三方 rec<br>
自行下载好 gsi 解压后得到 img 镜像包</p>
<h3 id="刷机前注意">刷机前注意</h3>
<p>使用官方稳定ROM作为底包，不要使用开发版和任何官改版。</p>
<h3 id="开始刷机">开始刷机</h3>
<h4 id="方法一rec-刷入">方法一：Rec 刷入</h4>
<h5 id="第一步-2">第一步</h5>
<p>手机备份好重要资料后，重启至第三方 recovery TWRP, 并在<strong>高级</strong>中选择<strong>取消强制加密</strong>并选中两项后确认。</p>
<h5 id="第二步-2">第二步</h5>
<p>主页面选择<strong>清除</strong>，滑动下方滑块进行<strong>双清</strong>即可，不要自作多情，双清足够。</p>
<h5 id="第三步-2">第三步</h5>
<p>返回主页面，选择<strong>安装</strong>后，点击右下方<strong>刷入镜像</strong>，找到拷贝到手机里的<strong>img</strong>镜像包，选择后刷入<strong>System镜像</strong>分区内，等待结束后再次<strong>双清</strong>即可使用。</p>
<h4 id="方法二fastboot-刷入">方法二：fastboot 刷入</h4>
<blockquote>
<p><strong>此方法仅对小米手机有效</strong></p>
</blockquote>
<h5 id="第一步-3">第一步</h5>
<ul>
<li>网络下载符合所使用机型的 vbmeta.img, 并将其拷贝到 platform-tools 文件夹内</li>
<li>下载 <a href="https://github.com/phhusson/treble_experimentations/wiki/Generic-System-Image-%28GSI%29-list" target="_blank" rel="noopener noreffer">GSI</a> 包  (choose A/B one)</li>
</ul>
<h5 id="第二步-3">第二步</h5>
<p>adb依次输入以下命令
{% highlight ruby %}
fastboot &ndash;disable-verity &ndash;disable-verification flash vbmeta vbmeta.img
fastboot flash system <gsi-img>
fastboot -w
fastboot reboot
{% endhighlight %}</p>
<h2 id="六修复-gsi-可能存在的基础问题">六、修复 GSI 可能存在的基础问题</h2>
<h3 id="修复自动亮度失效">修复自动亮度失效</h3>
<ol>
<li>下载 <a href="https://drive.google.com/open?id=1DF-v-gwG1rQT-SbAZQYlTwFZFcOPKI9U" target="_blank" rel="noopener noreffer">framework-res__auto_generated_rro.apk</a></li>
<li>用re管理器将其复制到 vendor/overlay 文件夹</li>
<li>修改 overlay 文件夹权限为 <code>rwxr-xr-x</code></li>
<li>手机打开 Termux 输入以下命令
{% highlight ruby %}
mount -o remount -w /vendor
chcon u:object_r:vendor_overlay_file:s0 /vendor/overlay;chcon u:object_r:vendor_overlay_file:s0 /vendor/overlay/framework-res__auto_generated_rro.apk
{% endhighlight %}</li>
</ol>
<h3 id="修复扬声器失真">修复扬声器失真</h3>
<ol>
<li>手机下载 Root Explorer</li>
<li>删除两个文件夹</li>
</ol>
<blockquote>
<p>/system/vendor/lib/soundfx<br>
/system/vendor/lib64/soundfx</p>
</blockquote>
<ol start="3">
<li>改变 vendor 文件夹的权限为  <code>rw-r--r--</code></li>
<li>重启手机</li>
</ol>
<h3 id="修复屏幕状态栏圆角">修复屏幕状态栏圆角</h3>
<p>adb 输入以下命令(最后的数字根据自己喜好任意修改):<br>
{% highlight ruby %}
adb shell settings put secure sysui_rounded_content_padding 20
{% endhighlight %}</p>
<h2 id="七系统的使用">七、系统的使用</h2>
<p>完成以上步骤即可完成刷机工作，如过程中遇到问题，可以去负责维护相关镜像系统的GitHub反馈Issue。</p>]]></description>
</item>
<item>
    <title>刷机及 Root 教程</title>
    <link>https://jallenlau.github.io/android_flash_android/</link>
    <pubDate>Mon, 10 Jun 2019 21:40:32 &#43;0800</pubDate>
    <author>JallenLau</author>
    <guid>https://jallenlau.github.io/android_flash_android/</guid>
    <description><![CDATA[<h2 id="刷机前准备">刷机前准备</h2>
<ul>
<li>
<p>刷机前请解锁Bootloader，小米机型解锁链接如下：<br>
<a href="http://www.miui.com/unlock/index.html" target="_blank" rel="noopener noreffer">此处跳转小米手机解锁页面</a></p>
</li>
<li>
<p>成功解锁后，卡刷爱好者请下载专版 TWRP，线刷爱好者请备好 adb 环境。</p>
</li>
<li>
<p>（类原生系统需要）下载 <a href="https://xiaomifirmwareupdater.com/#stable" target="_blank" rel="noopener noreffer">Firmware</a> 最新底包，根据你目前所在系统版本选择合适的底包。</p>
</li>
<li>
<p>下载刷机包，存在电脑里，然后务必退出小米（谷歌）账号!</p>
</li>
</ul>
<h2 id="刷机步骤">刷机步骤</h2>
<h3 id="卡刷教程">卡刷教程</h3>
<h4 id="第一步">第一步</h4>
<p>刷入 TWRP，在 <strong>高级</strong> 中选择 <strong>签名Boot</strong> 从而替换官方 Recovery，首先点击 <strong>清除</strong> 选项，如果刷入 MIUI 国际版或 MIUI 官改版请直接滑动下方滑块（三清）即可，如果刷入第三方类原生 ROM 建议选择四清，如需自定义清理请点击 <strong>高级选项</strong>。</p>
<blockquote>
<ul>
<li><strong>双清：勾选 Dalvik/Art cache、Cache</strong><br>
<em>双清适用于同一个 ROM 直接升级，刷内核或者补丁包，例如从 V6.2 升级到 V6.3 时，双清可以清理缓存，但是又不至于把用户数据和应用程序清除。</em></li>
<li><strong>三清：勾选 Dalvik/Art cache、Cache、Data</strong><br>
<em>当你不确定你下载的那个包是否真的可用时，建议选这个，万一下载的 ROM 无法刷入，不至于开不了机（如果你的手机里有另外一个绝对可以刷入的包做保底的话，忽略三清用四清或者两清）。</em></li>
<li><strong>四清：勾选 Dalvik/Art cache、System、Data、Cache</strong><br>
<em>一般在刷入第三方 ROM 之前都应该进行四清，这样可以避免刷完ROM之后出现无法进入系统，或者在使用某些设置和 APP 时出现问题。四清是数据清除最彻底的方式，该操作会将手机原有的系统和其他数据全部清空。所以在操作前如有必要请先进行相应的数据备份。</em></li>
</ul>
</blockquote>
<h4 id="第二步">第二步</h4>
<p>进入 <strong>清除</strong> 选项，选择 <strong>格式化data</strong>，输入 <strong>yes</strong> 即可。若格式化之后手机连接电脑无法识别磁盘，请重启至 TWRP 即可连接，或者使用 OTG 拓展连接U盘刷机。</p>
<h4 id="第三步">第三步</h4>
<h5 id="miui-国际及官改">MIUI 国际及官改</h5>
<p>回到主页面，此时用 USB 线将手机连接至电脑，将刷机包、Magisk 卡刷包拷贝至内置储存，拷贝结束后点击 <strong>安装</strong>，找到刷机包，勾选 <strong>刷机结束后重启手机</strong>，刷入即可。</p>
<h5 id="第三方类原生-rom">第三方类原生 ROM</h5>
<p>回到主页面，此时用 USB 线将手机连接至电脑，将刷机包、底包、Magisk 卡刷包、GApps 卡刷包（microG 卡刷包）拷贝至内置储存，拷贝结束后点击 <strong>安装</strong>，找到底包，两项均不勾选刷入，成功后刷入第三方卡刷包（切记此时不要重启），接着：</p>
<ul>
<li>若刷入 microG，请移步 <a href="https://marasati.com/post/microg/" target="_blank" rel="noopener noreffer">安装 microG 步骤</a>。</li>
<li>若刷入 GApps：</li>
</ul>
<blockquote>
<ol>
<li>请先将手机重启至系统，然后重新进入到 TWRP。</li>
<li>进入 <strong>清除</strong>，选择 <strong>高级选项</strong>，勾选 <strong>system</strong>，选择 <strong>重新调整空间</strong>。</li>
<li>回到主页面，选择 <strong>挂载</strong>，勾选 <strong>system</strong> 以及 <strong>将system挂载为已读</strong>。</li>
<li>选择 GApps 卡刷包刷入后，双清进入系统即可。</li>
</ol>
</blockquote>
<h4 id="第四步root无需求者可忽略">第四步（Root，无需求者可忽略）</h4>
<p>无论任何时候都可以 Root，即使手机用了很长一段时间也可以，不必担心数据会被清空。<br>
事先下载好 Magisk 刷机包文件，拷入手机内存。选择 <strong>挂载System分区</strong> 和 <strong>挂载system分区为只读</strong> 后，刷入 Magisk 卡刷包即可。成功后，重启进入手机系统。</p>
<h3 id="线刷教程有待补充">线刷教程有待补充~</h3>
<h2 id="谷歌框架开机验证">谷歌框架开机验证</h2>
<h3 id="方法一">方法一</h3>
<p>连接可翻墙网络。</p>
<h3 id="方法二">方法二</h3>
<p>无可翻墙网络时，不插入 SIM 卡，开机界面刚显示时迅速开启<strong>飞行模式</strong>，<strong>切勿连接WiFi</strong>。</p>]]></description>
</item>
<item>
    <title>microG 简介及安装</title>
    <link>https://jallenlau.github.io/android_flash_microg/</link>
    <pubDate>Wed, 08 May 2019 00:00:00 &#43;0000</pubDate>
    <author>JallenLau</author>
    <guid>https://jallenlau.github.io/android_flash_microg/</guid>
    <description><![CDATA[<h2 id="microg-介绍">microG 介绍</h2>
<p>越来越多的 Library 和 API 仅适用于预先安装了各种 Google 应用的手机，从而有效地将第三方应用锁定到 Google 生态系统。出于这些原因，Android 被描述为“可远观而不可亵玩”的开放式。</p>
<p>此时microG项目诞生了——谷歌专有核心库和应用程序的免费软件克隆。
用户获得了扩展的应用程序支持，可以减少或监控发送给 Google 的数据，旧款手机可以提高电池寿命。microG 不仅用于真实设备，还取代了测试模拟器中的 Google 工具，甚至用于虚拟移动基础设施。</p>
<h2 id="组件">组件</h2>
<h3 id="service-core-gmscore">Service Core (GmsCore)</h3>
<p>是一个库应用程序，给需通过谷歌服务或 Google Maps Android API（v2）才可运行的应用程序所需的功能特性。</p>
<h4 id="概览">概览</h4>
<p>microG GmsCore 是 Google Play 服务框架的免费开源实现方式。它允许调用专有 Google API 的应用程序在基于 AOSP 的 Rom（如 Replicant 和 LineageOS）上运行。作为闭源 Google Apps（GAPPS）的替代品，它是在享受 Android 核心功能的同时保护隐私的强大工具。</p>
<h4 id="特征">特征</h4>
<blockquote>
<ul>
<li>选择加入 Google 服务并扩展应用程序支持<br>
(Opt-in to Google Services and extend application support)</li>
<li>在线/离线定位服务<br>
(On-/Offline location service)</li>
<li>易于使用电池，内存和CPU<br>
(Easy on battery, memory and CPU)</li>
<li>没有多余软件<br>
(No bloatware)</li>
<li>适用于真实设备，测试模拟器和虚拟移动基础设施<br>
(Works on real devices, test emulators and virtual mobile infrastructure)</li>
<li>免费且开源（Apache 2.0许可）<br>
(Free and open source (Apache 2.0 licensed))</li>
</ul>
</blockquote>
<h4 id="系统要求">系统要求</h4>
<p>需要伪装签名，使 GmsCore 可以假装官方 Play 服务使其存在于需要调用 Google API 的应用程序。</p>
<blockquote>
<h5 id="签名伪装">签名伪装</h5>
<p>您需要一个支持签名伪装的 Rom。一些自定义 Rom 需要安装补丁并且在手机内完成部分操作设置以支持。</p>
<ul>
<li>CarbonROM<br>
MicroG will ask for Signature Spoofing authorization</li>
<li>OmniROM 5<br>
Must be enabled at the bottom of the developer settings first.</li>
<li>OmniROM 6/7<br>
Must be enabled in Settings&gt;Apps&gt;Advanced(gear icon)&gt;Additional permissions&gt;Spoof signature.</li>
<li>MarshRom<br>
Must be enabled in Settings&gt;Apps&gt;Advanced(gear icon)&gt;Additional permissions&gt;Spoof signature.</li>
<li>AospExtended<br>
Must be enabled in Settings&gt;Apps&gt;Advanced(gear icon)&gt;App Permissions&gt;Spoof package signature.</li>
<li><a href="https://lineage.microg.org/" target="_blank" rel="noopener noreffer">LineageOS bundled with microG</a></li>
<li><a href="https://forum.xda-developers.com/showpost.php?p=71042083" target="_blank" rel="noopener noreffer">其他自定义Rom的支持列表</a></li>
</ul>
<p>如果安装了Xposed Framework，以下模块可以开启签名伪装：<a href="https://repo.xposed.info/module/com.thermatk.android.xf.fakegapps" target="_blank" rel="noopener noreffer">FakeGApps</a></p>
<p>还可以通过 <a href="https://github.com/Nanolx/NanoDroid" target="_blank" rel="noopener noreffer">NanoDroid-patcher</a> 修补自定义 Rom，无需任何计算机操作,它将自动修补每次更新的 Rom。</p>
<p>如果你已Root，但没有使用Xposed，你可以尝试使用 <a href="https://github.com/moosd/Needle" target="_blank" rel="noopener noreffer">Needle by moosd</a>（或 <a href="https://github.com/ale5000-git/tingle" target="_blank" rel="noopener noreffer">fork Tingle by ale5000</a>）或 <a href="https://github.com/Lanchon/haystack" target="_blank" rel="noopener noreffer">Haystack by Lanchon</a> 修补你已经安装的 Rom。Haystack可以选择添加一个简单的UI来控制伪装，它类似于 OmniROM 5 的伪装方式。请注意，所有3个修补程序都要求修补的是 Rom 不是 odexed。</p>
<p><strong>注意：microG GmsCore无法安装在拥有Google服务的设备上。</strong></p>
<p><a href="https://github.com/microg/android_packages_apps_GmsCore/wiki/Signature-Spoofing" target="_blank" rel="noopener noreffer">原文详情</a></p>
</blockquote>
<h4 id="模块">模块</h4>
<p>GmsCore 包括统一网络位置提供程序模块（UnifiedNlp），用于处理对 Google 网络位置提供程序的应用程序调用。它依赖于必须单独安装的位置和地址查找后端。</p>
<p><a href="https://github.com/microg/android_packages_apps_UnifiedNlp/blob/master/README.md" target="_blank" rel="noopener noreffer">参阅</a></p>
<p>对于完整的 microG 设置，可以安装PlayStore替换应用程序以及服务框架代理（GsfProxy）模块，以提供Google的推送消息服务。另请参见<a href="https://github.com/microg/android_packages_apps_GmsCore/wiki/Installation" target="_blank" rel="noopener noreffer">安装</a>。</p>
<h3 id="services-framework-proxy-gsfproxy">Services Framework Proxy (GsfProxy)</h3>
<p>是一个辅助实用程序，允许为 Google Cloud to Device Messaging（C2DM）开发的应用程序使用 Gms Core 内附带的 Google Cloud Messaging Service。</p>
<p><strong>同上GmsCore</strong></p>
<h3 id="unified-network-location-provider-unifiednlp">Unified Network Location Provider (UnifiedNlp)</h3>
<p>是一个库，可为使用 Google 网络位置的应用提供基于 Wi-Fi 和移动数据的地理定位。它包含在 GmsCore 中，但也可以在大多数 Android 系统上独立运行。</p>
<p><a href="https://github.com/microg/android_packages_apps_UnifiedNlp/blob/master/README.md" target="_blank" rel="noopener noreffer">详情</a></p>
<h3 id="maps-api-mapsv1">Maps API (mapsv1)</h3>
<p>是一个系统库，提供与现已弃用的 Google Maps API（v1）相同的功能。</p>
<p><a href="https://github.com/microg/android_frameworks_mapsv1" target="_blank" rel="noopener noreffer">详情</a></p>
<h2 id="下载">下载</h2>
<p>提供了从 microG 项目下载 APK 文件索引。对于非APK组件，请参阅相应的文档。</p>
<h3 id="f-droid存储库">F-Droid存储库</h3>
<p>下载和更新 microG 项目组件的最佳方法是使用 F-Droid 存储库。它目前为 GmsCore 提供稳定的夜间更新以及 GsfProxy 和 FakeStore 发布。</p>
<p><a href="https://microg.org/download.html" target="_blank" rel="noopener noreffer">点此跳转下载界面</a></p>
<h2 id="安装">安装</h2>
<h3 id="下载卡刷包">下载卡刷包</h3>
<p><a href="https://androidfilehost.com/?w=files&amp;flid=198483" target="_blank" rel="noopener noreffer">点此下载</a> <strong>NanoDroid-patcher</strong> 和 <strong>NanoDroid-microG</strong> 两个卡刷包。</p>
<h3 id="第一步">第一步</h3>
<p>刷入目标第三方 ROM（必须刷入不包含谷歌框架的系统包）。</p>
<h3 id="第二步推荐但不必要">第二步（推荐但不必要）</h3>
<p>刷入Magisk。</p>
<blockquote>
<p>如果安装了 Magisk，NanoDroid 将会被作为模块刷入，否则将会直接安装到/system 分区。</p>
</blockquote>
<h3 id="第三步无需求可省略">第三步（无需求可省略）</h3>
<p>安装 Kernel 核心。</p>
<h3 id="第四步">第四步</h3>
<p>安装 <strong>NanoDroid-patcher</strong> 卡刷包（时间大约在5到10分钟，请耐心等待。)</p>
<h3 id="第五步">第五步</h3>
<p>将下载好的 <strong>NanoDroid-microG</strong> 卡刷包打开，找到 <strong>.nanodroid.setup</strong>，以文本编辑模式打开，按照如下提示自定义按需设置：（<strong>1是开启,0是关闭</strong>）</p>
<blockquote>
<ul>
<li>nanodroid_microg=1<br>
microg核心，必须开启</li>
<li>nanodroid_gmscore=0<br>
谷歌原版服务框架，如果开启，上面microg要关闭，正常不开启</li>
<li>nanodroid_fdroid=1<br>
开源应用商店，按自己需求开启</li>
<li>nanodroid_apps=1<br>
microg其他软件默认开启</li>
<li>nanodroid_play=1<br>
谷歌原版商店，可以开启</li>
<li>nanodroid_overlay=0</li>
<li>nanodroid_zelda=1</li>
<li>nanodroid_mapsv1=1<br>
地图api，默认开启</li>
<li>nanodroid_init=1</li>
<li>nanodroid_gsync=0<br>
谷歌同步，联系人，chrome等同步，如果在使用谷歌同步要开启</li>
<li>nanodroid_swipe=0</li>
<li>nanodroid_forcesystem=0</li>
<li>nanodroid_nlpbackend=1000</li>
<li>nanodroid_nano=1</li>
<li>nanodroid_bash=1</li>
<li>nanodroid_utils=1</li>
<li>nanodroid_fonts=1</li>
<li>nanodroid_override=0</li>
</ul>
</blockquote>
<h3 id="第六步">第六步</h3>
<p>安装 <strong>NanoDroid-microG</strong> 卡刷包后，重启手机至系统。</p>
<h3 id="第七步">第七步</h3>
<p>打开 microG 设置如下：</p>
<blockquote>
<p>运行 Self Check 授予缺少的必要权限,并关闭电池优化<br>
启用 Google device registration<br>
启用 Google Cloud Messaging<br>
启用 Google SafetyNet<br>
在 UnifiedNlp Settings 内全部勾选</p>
</blockquote>]]></description>
</item>
</channel>
</rss>
