[{"categories":["essay"],"content":" 方才过了几年自由的生活，转眼却又步入了社会。从不见得任何人、任何组织曾教导过我该如何将身心状态调整好，以适应这倏然的转变。庆幸的是，在大学期间我曾走出校门，与社会各个阶层（其实主要是中高阶层）的人有过持久性的接触，以做了些许准备。可当我真正的走入社会，面临亲人与环境带来的“压力”时，我犯了错，迷茫了很长一段时间。 那时曾以为人生就是所见所闻，容不下梦想。可现在我才明白，人生不是所见所闻，而是所感。 “感情，曾以为可见的未来才足以承载持久的爱；工作，曾以为人本应承受无法热爱的折磨；生活，曾以为活着便是为了满足周围人于物质上评判的目光；未来，曾以为我也不过是一介草民，只配重复机械的人生。如今，回想刚开始的迷惘，不禁感慨人活着能经历这个过程是多么美好啊！当你对自己一无所知，对未来毫无概念的时候，以为只能从所见所闻来定义自己的未来，从而制定一生的方向。那时的你确定了方向以后，生活看似充满活力与节奏感。当你在一步步迈向未来的过程中，也许你会觉得生活无比的充实，也许你会意识到你的判断存在着致命的问题。很幸运，我是后者。 我意识到了问题。我在慢慢地抛弃曾经梦想的未来，在向现实，在向社会低头。当身边几乎每人都认为赚钱买房结婚生子才是人生目标的时候，你恰恰会明白这个目标大错特错。世界上从来不缺乏有梦想的人，缺少的是能够意识到自己梦想幻灭的人。 我生活在中国，身边的亲人都曾经历过封建社会的思想熏陶，思想在不知不觉中固化成型，即使现在进入了21世纪，也无法动摇一丝一毫。在我从小到现在的所见所闻中，获取到“成功”的定义其实很简单——“考取知名大学、毕业拥有一份薪酬很高的职位、能凭借自我的力量买一套住房、生下一个男孩（或者男女双全，当然重男轻女现象依然严重存在于中国社会）、男孩长大成人重复父母的‘成就’、善终（善的定义有很多种，在我接受的信息中，‘善’意味着子孙满堂、家财万贯）”。我生活的社会里，大部分人都抱着以上的希望在世上努力的活下去、奋斗下去，未曾想过难道是每一个人都将拥有以上的“成就”吗？答案当然是否定的。有富就有穷，没有地基何来高楼大厦。我深刻的意识到，这些并不是我想要的。人多以金钱来评判某人在社会或家庭中的地位，我的部分亲人也是如此，但这并不意味着他们是错的，反而这证明我们的社会恰恰养育着这类人，他们在孩子时代被喂食的思想便是如此。对于自己，虽然家庭并不富裕，父亲一人骑单车买水果，母亲一线工人，然而正是这个社会中底层家庭培育了我和姐姐两个孩子，有这样的父母已是上天对我的恩赐。同时我也感恩那些依靠金钱作为评判标准的亲人的存在，让我从小因家庭的贫穷，自信坠入低谷，这使我从孩子时代便深知这种观念会给一个无辜的孩子带来多么巨大的心灵伤害。那时的我，是个极度自卑的人，甚至在学校不敢说自己父亲从事的工作，怕被同学嘲笑，也许这就是中国穷孩子甚至是世界上穷孩子的真实心理写照吧。物极必反，这却又给予了我积极的助推力——在高考前便下定决心，一定考取外省的学校。我想远离给我曾带来阴影的家庭圈，到一个完全陌生，无人知道我的家庭是否富有的环境。也许我可以在外地伪装成一个有钱人，这是畸形的自信心。以上也只是我在此刻写下这些文字时的猜想，事实并非如此，上了大学我并非伪装成有钱人，而仍是以自卑的真我在校园生活，我明白自己的本性并没有变质，儿时的我只是在尽力的去适应这个社会、适应身边人的目光。如开端所言，大学四年，走出校园，踏上了自我追寻之路。四年时光，我重拾自信心。 说实话，其实是自负。我觉得自己不同于其他人、有着高尚的精神追求、且不甘流于世俗。可步入社会后，我的种种行为、思维方式却一个耳光扇醒了自己——我还是一个“俗”人。 如今，我才算是处在成长的第一步，我真正的知道了自己想要的生活。得益于母亲，我有着正确的金钱观，我从来不把钱视为己物。这也为我之后的生活立下了基础。我无法想象在我的身边或者我的未来家庭中，依然存在着家境不好的孩子受到心灵的伤害，无法忍受一个穷人或者地位低下的人在社会里得不到公正的待遇。我生活的社会是病态的，却从来没有任何人告诉过我，但我不怨他们，因为他们也是受害者。看到一代代人苦苦的在人生路上匍匐，我深知自己想做一个“人”的心有多么热诚。我要做人、不要做畜生。 我们活在苍穹之下，环境给什么，人们就吸收什么，仰天望着天空，却无法看到那透明的半球型玻璃罩。在这苍穹之下，我们无法倾听外界的声音，无法感受世界的脉动。每日每夜，我们听到的是印钞机刷刷运行的噪声，听到的是身边人在啐口水数钱的默念声，再深远一点，我们听到的是工作升职时熟人对你的鼓掌认可声（当然更多的是虚伪的奉承），听到的是孩子踏入这个世界的哭泣声（也许抱怨着为什么不经过 ta 的同意，就将 ta 带到这苍穹之下生活），听到的是 ATM 机存取钞票的机械声，听到的是自己死去时亲人的哭喊声。也许我们还希望在死后听到活着的亲人甚至是陌生人对自己的离开的惋惜声（当然人死了还听个屁），等等等等。当然，苍穹下的人乐于这些，因为这就是他们存在的意义。 万分幸运，有一天孙悟空在睡梦中找到我，他二话不说，拔下了一根汗毛就一口气鼓进了我的右耳。我从睡梦中惊醒，周围寂静得可怕，连父亲的鼾声都消失不见。掏了掏右耳，那根汗毛落在了我的手上，于是我念着咒语用金箍棒偷偷的把苍穹顶戳了个大窟窿。那是我第一次呼吸到了清新（自由）的空气，那也是我第一次体会到生命还有如此幸福的时刻，不敢想象以前的我又是怎样忍受苍穹里污浊的空气呢？一切似乎都是未解之谜。 未来的某一天，当其他人终于发现苍穹顶的那个大窟窿时，也许他们以为破碎的那一块玻璃，永远地离开了它们的世界，但其实那块玻璃不曾存在过一刻。 人生应该是怎样的呢？我想看到这里你的心里也会有了答案，这份答案也许和我的不同。但我坚信殊途同归，我们的目的地都是同样的高尚纯洁。 我也坚信，我会陪着我爱的人踏出苍穹，拥抱真正的生活。 ","date":"2020-03-02","objectID":"/private_doc_life/:0:0","tags":[""],"title":"关于人生的自述","uri":"/private_doc_life/"},{"categories":["essay"],"content":"读远藤周作「沉默」有感","date":"2020-03-02","objectID":"/private_book_silence/","tags":[""],"title":"我的信仰","uri":"/private_book_silence/"},{"categories":["essay"],"content":"读远藤周作「沉默」有感 “世人并不只限于圣人和英雄。要不是生长在这遭受迫害的时代，不知有多少信徒根本不必弃教或舍弃生命，就可以一直信守着幸福的信仰呢。他们只是平凡的信徒，最后被肉体的恐怖击倒了。”吉次郎的这番话在司祭脑海中翻滚，那个看似胆怯、懦弱，在威胁面前多次弃教的人也许才是真正的信徒。 本书所描述的故事是两名葡萄牙神甫在德川家光时代，冒着被捕及死亡的危险毅然来到日本拯救天主教徒的信仰，然而在面对信徒接连死亡时，却无法感知到上帝的一丝眷顾，他将希望寄托在那梦中的神，而神一次次的沉默让他开始怀疑自己多年来坚持且信奉的信仰，终于他在神的沉默中用脚掩盖了圣母的神像，而此后的他才领悟到了真正的信仰。 正如此，任何一种宗教信仰都不完全，这是因为它们是由不完全的人传给我们的。曾经的自己也迷失在盲目的信仰中，以为履行佛教徒应做的便是信仰，那段时间曾尝试素食，却忽略了自己的特立独行给身边朋友带来的影响，那时的我犹如疯子般执着于这一切，乐此不疲。我不正是在模仿正信么？何谓正信，是通过智慧、慈悲、定力所产生的信仰，这样的信仰，心常在安定中。而我恰恰坠入了邪信的沼泽却自以为然。书中司祭的一段内心独白正印证了这一切–“这里的百姓经常向我要十字架，纪念章或者圣画之类的东西。当我告诉他们这些东西都留在船上时，他们露出了极为悲伤的表情，我因此把自己的念珠拆开，一粒粒分给他们，日本信徒崇敬这些东西并非坏事，可是，我有一种奇怪的不安，怀疑他们是否弄错了什么？” 当信仰成为人们心中无法捉摸的存在，也许我们都会找来几样物件作为神圣的依托，孰不知在此过程中，信仰在慢慢转化为拜物教的邪信。弘一法师后半生专注于净土宗念佛法门，当他在死亡面前念着那一句句“南无阿弥陀佛”的时候，我相信此时的他定是心无所住，他所往生的西方极乐世界也只代表着他心无挂念的离开。扪心自问，我们多少人弄错了正信，而面对信仰的偏差，也无人为自己指正，后来的我慢慢看到了信仰的阴暗面，也促使我本就偏颇的信仰之火日益退却，然而从未真正拾起教义的我，又怎么配说“弃教”二字呢？ 记得当初因终日苦于死亡的困扰和与人交往的苦楚踏入庙门，遇到了善师父和善师兄。那时的我自得其乐，暂时忘却了死亡的困扰之苦，也学会了在众人面前伪装以显得自己并不孤傲。可我错了，错的是那么离谱。我不过是将庙内琐事充斥了自己的内心，暂时忘却了这使我痛苦的死亡，书中司祭在死亡面前头脑中闪过的念头再次给我震撼–“主啊，怜悯我！主啊，不要再舍弃我！不要再莫名其妙的抛弃我们，这就是祈祷吗？长久以来，我一直认为祈祷是为了赞美你，然而现在向你说话时，却好像是为了诅咒你。” 当我“弃教”后，死亡的恐惧再次袭来，白昼黑夜，无时不在寻找着空隙钻进我那颗脆弱的心。我以为没有信仰也可以度过欢愉的一生，也可以终有一日得到解脱，也可以在死亡到来的时候坦然面对。可我再次错了，我忘了自己只是一个不完全的人，随时光的流逝我意识到了自己以前犯下的种种过错，我又怎敢肯定此时的我是正确无误的呢？我是一个凡人，我需要信仰，我需要信仰来为自己指路，但这份信仰不是释迦牟尼、不是耶稣，也不是安拉，而是我自己。只有切身实践正义的教旨，才能切实感受到信仰的力量，从而在死亡面前内心安然无恙。我不想克服这一切苦难，我想要在它们面前不动声色，甚至大笑，让它们知道我的内心是多么坚强。 “在日本，我们了解的是，因为一己软弱无能，故众生依赖佛的慈悲，这叫做佛教。但是，那个神甫很清楚地说出，天主教所说的救赎和佛教不同。天主教的救赎是，不只依赖上帝就行了，还得信徒有坚强的意志。从这一点看，天主教的教义在日本这沼泽不知何时已被扭曲。”司祭弃教后，筑后守冷冷的声音道出了信仰的真谛。而我也明白了，筑后守对天主教徒所做的那些看似残忍无情的行为，实际是在帮助他们找寻自己内心的信仰，真正属于每一个人的信仰。 信仰是我的症结，此时的我茅塞顿开。我终于进一步想清楚了何为信仰何为爱，也知道未来应该如何一步步践行属于我的信仰。 谢谢你，远藤周作。 ","date":"2020-03-02","objectID":"/private_book_silence/:0:0","tags":[""],"title":"我的信仰","uri":"/private_book_silence/"},{"categories":["code"],"content":"持续更新本人 Linux 学习过程中所需常见命令，已更新完结。 ","date":"2019-06-04","objectID":"/ubuntu_code/:0:0","tags":[""],"title":"Ubuntu 常见命令","uri":"/ubuntu_code/"},{"categories":["code"],"content":"基础指令 ls #ls //列出当前路径下的全部文件夹名称 #ls \u003cpath\u003e //列出指定路径下的全部文件(夹)名称 #ls root //列出相对路径root下的全部文件夹 #ls /root //列出绝对路径root下的全部文件夹 #ls -l \u003cpath\u003e //以详细列表的形式列出路径下的所有文件夹 #ls -a \u003cpath\u003e //显示隐藏文件(夹) #ls -lh cd \u0026 pwd #pwd // Print Working Directory 打印当前工作路径 #cd \u003cpath\u003e // Change Directory 切换当前工作目录 #cd ~ //切换到当前用户的家目录 //#cd ~/apple mkdir (Make Directory) #mkdir \u003cpath\u003e //创建目录 //#mkdir newfolder //#mkdir /root/newfolder #mkdir -p \u003cpath\u003e //创建多层不存在目录 //#mkdir -p /root/newfolder/a/b/c/d #mkdir path1 path2 path3... //创建多个目录 touch #touch \u003cpath\u003e //创建文件 //#touch fold1.txt fold2.txt... cp (Copy) #cp \u003ccopy path\u003e \u003cpaste path\u003e //可以对新文件重命名 #cp -r \u003ccopy folder\u003e \u003cpaste folder\u003e //复制文件夹，\"- r\" 表示递归复制 mv (Move) #mv \u003cmove path\u003e \u003cpaste path\u003e rm (Remove) #rm -f \u003cpath\u003e //force remove #rm -r \u003cpath\u003e //删除文件夹 //rm -rf \u003cpath\u003e #rm -f linux* //删除具有公共特性的文件，*为通配符 vim #vim \u003cfold\u003e //文件存在与否均可 //Shift+: 按下 q 后回车即可退出 储存重定向 #正常执行的指令 \u003e/\u003e\u003e 文件的路径 //文件不存在则自动创建 //#ls -la \u003e ls.txt 覆盖 //#ls -la \u003e\u003e ls.txt 追加 cat #cat \u003cpath\u003e //直接打开文件 #cat \u003cpath1\u003e \u003cpath2\u003e ... \u003cpathN\u003e \u003e \u003cpath\u003e //合并文件 ","date":"2019-06-04","objectID":"/ubuntu_code/:1:0","tags":[""],"title":"Ubuntu 常见命令","uri":"/ubuntu_code/"},{"categories":["code"],"content":"进阶指令 df #df -h //查看磁盘空间 free #free -m/h //查看内存使用情况，-m 表示以 MB 为单位查看 swap 用于临时内存 shared 用于共享内存 head #head -n abc.log //查看文件前 n 行，如果不指定，默认为10行 tail #tail -n abc.log //查看文件末 n 行，如果不指定，默认为10行 #tail -f \u003cpath\u003e //查看文件动态变化 一般用于查看系统日志 less #less \u003cpath\u003e //查看文件，以较少的内容进行输出，按下辅助功能键（数字+回车、空格+上下方向键）查看更多 wc #wc -lwc //统计文件内容信息（包含行数、单词数、字节数） //-l 行数 //-w 单词数 //-c 字节数 date #date //表示操作时间日期（读取、设置） #date +%F #date \"+%Y-%m-%d\" //输出形式：2019-07-02 #date \"+%F %T\" #date \"+%Y-%m-%d %H:%M:%S\" //输出形式：2019-07-02 08:41:20 #date -d \"-1 day\" \"+%Y-%m-%d %H:%M:%S\" #date -d \"-1 year\" \"+%Y-%m-%d %H:%M:%S\" //获取之前的时间 #date -d \"+1 day\" \"+%Y-%m-%d %H:%M:%S\" //获取之后的时间 %F 表示完整的年月日 %T 表示完整的时分秒 %Y 表示四位年份 %m 表示两位月份（带前导0） %d 表示日期（带前导0） %H 表示小时（带前导0） %M 表示分钟（带前导0） %S 表示秒数（带前导0） cal #cal #cal -1 //直接输出当前月份日历 #cal -3 //输出上月+本月+下月日历 clear/ctrl+L #clear/ctrl+L //清除(隐藏)终端中已经存在的信息 管道 一般用于“过滤”、“特殊”、“拓展处理”。 不能单独使用，主要是辅助作用。 #ls /|grep y //过滤（查询出根目录下包含 “y” 的文档名称） 针对以上命令说明： ① 以管道作为分界线，前面的命令有个输出，后面需要先输入，再过滤最后输出。 ② grep 指令主要用于过滤。 #ls /|wc -l //统计根目录文档总个数 ","date":"2019-06-04","objectID":"/ubuntu_code/:2:0","tags":[""],"title":"Ubuntu 常见命令","uri":"/ubuntu_code/"},{"categories":["code"],"content":"高级指令 host name 操作主机名（读取、设置） #hostname #hostname -f //输出当前主机名中的 FQDN （全限定域名） id 查看用户基本信息（包含用户id，用户组id，附加组id…），该指令如果不指定用户则默认当前用户。 #id #id username //指定用户的信息 验证上述信息是否正确？ 验证用户信息：#cat /etc/passwd 验证用户组信息：#cat /etc/group whoami 显示当前登录用户名，一般用于 shell 脚本，用于获取当前用户名，方便记录日志。 #whoami ps -ef 查看服务器进程信息 “ -e ” 等价于 “ -A ” ，表示列出全部的进程 “ -f ” 显示全部列 jallen@JALLENLAU:~$ ps -ef UID PID PPID C STIME TTY TIME CMD root 1 0 0 07:44 ? 00:00:00 /init ro root 6 1 0 07:44 tty1 00:00:00 /init ro jallen 7 6 0 07:44 tty1 00:00:00 -bash jallen 30 7 0 09:01 tty1 00:00:00 ps -ef 列的含义： UID：该进程执行的用户id PID：进程id PPID：该进程的父级进程id，如果一个程序的父级进程找不到，改进程称之为僵尸进程 C：CPU的占用率 STIME：进行的启动时间 TTY：终端设备，发起该进程的设备识别符号 TIME：进程的执行时间 CMD：该进程的名称或者对应的路径 #ps -ef|grep name //在 ps 结果中搜索 top 查看服务器进程占用资源 jallen@JALLENLAU:~$ top top - 10:35:23 up 2:51, 0 users, load average: 0.52, 0.58, 0.59 Tasks: 4 total, 1 running, 3 sleeping, 0 stopped, 0 zombie %Cpu(s): 5.1 us, 3.7 sy, 0.0 ni, 90.9 id, 0.0 wa, 0.3 hi, 0.0 si, KiB Mem : 8273208 total, 3175048 free, 4868808 used, 229352 buff/cac KiB Swap: 15497464 total, 14828848 free, 668616 used. 3270668 avail Me PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ 1 root 20 0 8892 0 0 S 0.0 0.0 0:00.10 6 root 20 0 8904 0 0 S 0.0 0.0 0:00.01 7 jallen 20 0 16928 1216 1128 S 0.0 0.0 0:00.26 484 jallen 20 0 17644 1948 1436 R 0.0 0.0 0:00.03 表头含义： PID：进程id USER：该进程对应的用户id PR：优先级 VIRT：虚拟内存 RES：常驻内存 SHR：共享内存 S：运行的状态（S代表睡眠，R代表运行） %CPU：表示 CPU 占用百分比 %MEM：表示内存占用百分比 TIME+：执行的时间 COMMAND：进程的名称和路径 计算一个进程实际使用的内存 = 常驻内存 - 共享内存 在运行 top 的时候,可以按下方便快捷键: M:表示将结果按内存从高到低进行排序 P:表示将结果按照 CPU 使用率从高到低进行降序排序 du -sh 查看目录真实大小 “ -s ”只显示汇总的大小 “ -h ”表示以较高可读性进行显示 #du -sh \u003cpath\u003e find 用于查找 #find \u003cpath\u003e option name option: -name //按照文档名称搜索（支持模糊搜索） -type //按照文档类型搜索（“-”表示文件，在用find时用f替换），“d”表示文件夹 service 用于控制一些软件服务的启动/停止/重启 #service name start/stop/restart kill #kill 进程PID //配合 ps 一起使用 #killall 进程名称 ifconfig #ifconfig //获取网卡信息 reboot 重启计算机 #reboot #reboot -w //模拟重启（只写开机与关机的日志信息） shutdown 关机 #shutdown #shutdown -h now/15:25 uptime 输出计算机的持续在线时间 #uptime uname 获取计算机操作系统相关信息 #uname //获取操作系统的类型 #uname -a //获取全部的系统信息（类型、全部主机名、内核版本、发布时间、开源计划） netstat -tnlp 查看网络连接状态 #netstat -tnlp 选项说明： -t：表示只列出 tcp 协议的链接 -n：表示将地址从字母组合转化为 ip 地址，将协议转化成端口号显示 -l：表示过滤出 stat（状态）列中其值为 LISTEN（监听）的连接 -p：表示发起连接的进程的 PID 的进程名称 man（Manual） 手册（包含Linux中全部命令手册） #man cp/rm/wc... ","date":"2019-06-04","objectID":"/ubuntu_code/:3:0","tags":[""],"title":"Ubuntu 常见命令","uri":"/ubuntu_code/"},{"categories":["code"],"content":"替换源 输入指令。 sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak //备份 sudo vim /etc/apt/sources.list //打开list列表 替换阿里源。 deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse 按 ESC 退出，并输入:wq保存。 输入指令更新源。 sudo apt update sudo apt upgrade ","date":"2019-06-04","objectID":"/ubuntu_code/:4:0","tags":[""],"title":"Ubuntu 常见命令","uri":"/ubuntu_code/"},{"categories":["code"],"content":"安装 更新软件库 sudo apt-get update 安装软件 sudo apt-get install \u003cpackage\u003e 通过关键词搜索软件库 sudo apt search \u003ckey\u003e ","date":"2019-06-04","objectID":"/ubuntu_code/:5:0","tags":[""],"title":"Ubuntu 常见命令","uri":"/ubuntu_code/"},{"categories":["code"],"content":"卸载 删除软件及其配置文件。 apt-get purge / apt-get --purge remove \u003cpackage\u003e 删除依赖包,保留配置文件。 apt-get autoremove \u003cpackage\u003e 删除软件，不删除依赖包，保留配置文件。 apt-get remove \u003cpackage\u003e apt的底层包是dpkg，而dpkg安装Package时，会将*.deb 放在 /var/cache/apt/archives/ 中，apt-get autoclean 只会删除 /var/cache/apt/archives/ 已经过期的deb。 apt-get autoclean ","date":"2019-06-04","objectID":"/ubuntu_code/:6:0","tags":[""],"title":"Ubuntu 常见命令","uri":"/ubuntu_code/"},{"categories":["code"],"content":"以最高权限开启文件管理 sudo nautilus ","date":"2019-06-04","objectID":"/ubuntu_code/:7:0","tags":[""],"title":"Ubuntu 常见命令","uri":"/ubuntu_code/"},{"categories":["other"],"content":"树莓派 4B 完美实现音乐无损串流","date":"2020-02-23","objectID":"/raspberry_music/","tags":[""],"title":"树莓派 4B 完美实现音乐无损串流","uri":"/raspberry_music/"},{"categories":["other"],"content":"利用树莓派低功耗、低噪音、免关机的特性，针对有聆听无损音乐且鄙夷繁杂操作等需求的用户打造一台方便的无损音乐串流器。 ","date":"2020-02-23","objectID":"/raspberry_music/:0:0","tags":[""],"title":"树莓派 4B 完美实现音乐无损串流","uri":"/raspberry_music/"},{"categories":["other"],"content":"溯源 现在到了无损音乐贩售厂家都开始做流媒体的时代了，所以享受高品质音乐的同时，便捷性也成为关注点。毅然决然卖掉了 Sony zx300 播放器，入了个 xDuoo 出的新款解码耳放，想着利用手里闲置的那台安卓手机实现流媒体无损串流。只可惜安卓系统虽然从 Android N 时代就宣布手机 USB 传输音频支持动态采样率，可到了 Android 10 时代发现，输出采样只会锁定 48kHz、192kHz、384kHz。不巧的是，我的解码耳放当输入手机强制重采样为 192kHz 的音乐时，持续产生爆破音。头疼的刷了多个类原生系统以及 MIUI 系统（只支持 48kHz 采样）都无法解决问题。迫于贫穷没法买一台 iPhone 作为音乐转盘，由此考虑利用树莓派低功耗、低噪音、免关机的特性，借助国外开发者的固件实现流媒体整合传输并保证无损的功能。 ","date":"2020-02-23","objectID":"/raspberry_music/:1:0","tags":[""],"title":"树莓派 4B 完美实现音乐无损串流","uri":"/raspberry_music/"},{"categories":["other"],"content":"采用固件 ","date":"2020-02-23","objectID":"/raspberry_music/:2:0","tags":[""],"title":"树莓派 4B 完美实现音乐无损串流","uri":"/raspberry_music/"},{"categories":["other"],"content":"Volumio 利用国外的 volumio 固件进行功能实现，可以将音频直接通过 USB 接口数字传输到 DAC 解码设备，不经过系统 SRC 处理，保证了音频文件的原位深、源采样率。 经过本人亲自体验总结以下使用特性： 支持本地存储、局域网读取、NAS 通过插件支持 Spotify 无缝串流（最高320kbps） One Drive 云盘读取私人音乐库（操作很迟钝，操作不人性） Tidal、Qobuz 无损音乐串流（付费功能，且只能在后台操作页面选择歌曲或者官方 app） 支持 DSD 原生传输或经过系统 PCM 传输 DoP 支持无损 FLAC 电台播放功能 支持 DLNA、miniDLNA、AirPlay ","date":"2020-02-23","objectID":"/raspberry_music/:2:1","tags":[""],"title":"树莓派 4B 完美实现音乐无损串流","uri":"/raspberry_music/"},{"categories":["other"],"content":"moOde（推荐） 利用国外的 moOde 固件进行功能实现，可以将音频直接通过 USB 接口数字传输到 DAC 解码设备，不经过系统 SRC 处理，保证了音频文件的原位深、源采样率，支持，操作页面更专业化，更美观。 经过本人亲自体验总结以下使用特性： 支持本地存储、局域网读取、NAS 通过插件支持 Spotify 无缝串流（最高320kbps） 支持 UPnP （Tidal、Qobuz、One Drive、Google Drive 等音乐通过手机 UPnP 软件统一操控，软件选择性广泛且十分方便，除 Tidal 只能 16-44.1 FLAC 传输，Qobuz 最高支持 24-192 FLAC 传输，云盘内直接原文件传输） 支持 DSD 原生传输 支持 DLNA、miniDLNA、AirPlay ","date":"2020-02-23","objectID":"/raspberry_music/:2:2","tags":[""],"title":"树莓派 4B 完美实现音乐无损串流","uri":"/raspberry_music/"},{"categories":["other"],"content":"所需设备及固件 Etcher 镜像烧录工具 Volumio 下载适配 Raspberry 固件 moOde 下载适配 Raspberry 固件 Micro-SD 16GB 内存卡（容量足矣） 读卡器 树莓派 4B（具备无线网卡款） xDuoo XD-05 DAC 解码耳放（自选） ","date":"2020-02-23","objectID":"/raspberry_music/:3:0","tags":[""],"title":"树莓派 4B 完美实现音乐无损串流","uri":"/raspberry_music/"},{"categories":["other"],"content":"步骤 ","date":"2020-02-23","objectID":"/raspberry_music/:4:0","tags":[""],"title":"树莓派 4B 完美实现音乐无损串流","uri":"/raspberry_music/"},{"categories":["other"],"content":"Volumio 安装过程 烧录前将卡格式化为 FAT32 格式，利用 Etcher 将 Volumio 固件烧录到 Micro-SD 卡内。 将卡插入树莓派，开机。 输入用户名：volumio ，密码：volumio 打开电脑搜索名称为 Volumio 的 WiFi ，输入密码：volumio2 连接。 依次按照提示操作，并连接无线网络。 用同一无线网下的设备登录 http://volumio.local ,即可享受聆听。 若选择连接有线网络，则保证在同一网段的情况下，登录树莓派所在 IP 地址。 ","date":"2020-02-23","objectID":"/raspberry_music/:4:1","tags":[""],"title":"树莓派 4B 完美实现音乐无损串流","uri":"/raspberry_music/"},{"categories":["other"],"content":"moOde 安装过程 烧录前将卡格式化为 FAT32 格式，利用 Etcher 将 moOde 固件烧录到 Micro-SD 卡内。 将卡插入树莓派，开机。 打开电脑搜索名称为 moode 的 WiFi ，输入密码：moodeaudio 连接。 依次按照提示操作，并连接无线网络。 用同一无线网下的设备登录 http://moode.local ,即可享受聆听。 若选择连接有线网络，则保证在同一网段的情况下，登录树莓派所在 IP 地址。 ","date":"2020-02-23","objectID":"/raspberry_music/:4:2","tags":[""],"title":"树莓派 4B 完美实现音乐无损串流","uri":"/raspberry_music/"},{"categories":["other"],"content":"本文详细介绍利用 Github Pages 搭建个人博客，以及自定义域名步骤。 ","date":"2019-06-11","objectID":"/bulid_blog_github/:0:0","tags":[""],"title":"创建 GitHub Pages \u0026 自定域名教程","uri":"/bulid_blog_github/"},{"categories":["other"],"content":"建立 GitHub Pages ","date":"2019-06-11","objectID":"/bulid_blog_github/:1:0","tags":[""],"title":"创建 GitHub Pages \u0026 自定域名教程","uri":"/bulid_blog_github/"},{"categories":["other"],"content":"第一步 建立 GitHub 账户 ","date":"2019-06-11","objectID":"/bulid_blog_github/:1:1","tags":[""],"title":"创建 GitHub Pages \u0026 自定域名教程","uri":"/bulid_blog_github/"},{"categories":["other"],"content":"第二步 首先 进入主页点击右上角 + 号，建立 New Repository。 其次 Repository name 填写 username.github.io，此处注意 username 部分一定需要与你的用户名相同。 最后 勾选 Initialize this repository with a README，然后点击 Create repository。 ","date":"2019-06-11","objectID":"/bulid_blog_github/:1:2","tags":[""],"title":"创建 GitHub Pages \u0026 自定域名教程","uri":"/bulid_blog_github/"},{"categories":["other"],"content":"第三步 首先 进入建立完成的项目主页，点击右上角的 Settings。 其次 找到 GitHub Pages，点击 Choose theme 选择一个主题后点击确认，选择完毕之后 GitHub Pages 就会自动帮你生成好网站，在他跳转的界面点击 Commit changes 按钮，网站就可以访问了。 最后 在浏览器内直接输入 username.github.io，如果成功打开页面即成功完成 Pages 的建立。 ","date":"2019-06-11","objectID":"/bulid_blog_github/:1:3","tags":[""],"title":"创建 GitHub Pages \u0026 自定域名教程","uri":"/bulid_blog_github/"},{"categories":["other"],"content":"自定域名 ","date":"2019-06-11","objectID":"/bulid_blog_github/:2:0","tags":[""],"title":"创建 GitHub Pages \u0026 自定域名教程","uri":"/bulid_blog_github/"},{"categories":["other"],"content":"第一步 自行购买一个域名，如本人在 Google 购买的域名 marasati.com。 ","date":"2019-06-11","objectID":"/bulid_blog_github/:2:1","tags":[""],"title":"创建 GitHub Pages \u0026 自定域名教程","uri":"/bulid_blog_github/"},{"categories":["other"],"content":"第二步 域名为 username.com类的根域名 打开域名供应商网站,将自定 DNS 资源处增加记录。 打开 Linux，运行代码 ping username.github.io 得到 IP 地址并将其复制。 增加两条记录： 名称默认 @，类型 A，TTL 输入600（10m），IPv4地址填写刚刚复制的 IP 地址 名称 www，类型 CNAME，TTL 输入600（10m），IPv4地址填写 username.github.io 域名为 grus.myou.life 类的子域名 打开域名供应商网站,将自定 DNS 资源处增加两条记录： 名称 grus，类型 CNAME，TTL 输入600（10m），IPv4地址填写 username.github.io 名称 www，类型 CNAME，TTL 输入600（10m），IPv4地址填写 username.github.io ","date":"2019-06-11","objectID":"/bulid_blog_github/:2:2","tags":[""],"title":"创建 GitHub Pages \u0026 自定域名教程","uri":"/bulid_blog_github/"},{"categories":["other"],"content":"第三步 回到 GitHub 所建项目的 Settings，下滑找到 Github Pages，在 Custom domain 内填入购买的域名后点击 Save，下方 enforce https 是否勾选自行选择。 ","date":"2019-06-11","objectID":"/bulid_blog_github/:2:3","tags":[""],"title":"创建 GitHub Pages \u0026 自定域名教程","uri":"/bulid_blog_github/"},{"categories":["other"],"content":"建立完成","date":"2019-06-11","objectID":"/bulid_blog_github/:2:4","tags":[""],"title":"创建 GitHub Pages \u0026 自定域名教程","uri":"/bulid_blog_github/"},{"categories":null,"content":"关于 JallenLau","date":"2022-06-15","objectID":"/about/","tags":null,"title":"This is Jallen ! 😎","uri":"/about/"},{"categories":null,"content":"基础技能 ","date":"2022-06-15","objectID":"/about/:1:0","tags":null,"title":"This is Jallen ! 😎","uri":"/about/"},{"categories":null,"content":" JavaScript Syntax and Basic Constructs / DOM Manipulation / Fetch API / ES6+ and modular JavaScript / JavaScript Concepts ","date":"2022-06-15","objectID":"/about/:1:1","tags":null,"title":"This is Jallen ! 😎","uri":"/about/"},{"categories":null,"content":"  HTML HTML Basics / Semantic HTML / Accessibility / Basics of SEO ","date":"2022-06-15","objectID":"/about/:1:2","tags":null,"title":"This is Jallen ! 😎","uri":"/about/"},{"categories":null,"content":"  CSS CSS Basics / Making layouts / Responsive Web Design / CSS Preprocessors ","date":"2022-06-15","objectID":"/about/:1:3","tags":null,"title":"This is Jallen ! 😎","uri":"/about/"},{"categories":null,"content":" React React Basics / Hooks / Context / Render Props / Ecosystem: Routers / Ecosystem: Redux ","date":"2022-06-15","objectID":"/about/:1:4","tags":null,"title":"This is Jallen ! 😎","uri":"/about/"},{"categories":null,"content":" Vue ( Learning… ) ","date":"2022-06-15","objectID":"/about/:1:5","tags":null,"title":"This is Jallen ! 😎","uri":"/about/"},{"categories":null,"content":"  Java ( Learning… ) ","date":"2022-06-15","objectID":"/about/:1:6","tags":null,"title":"This is Jallen ! 😎","uri":"/about/"},{"categories":null,"content":" Golang ( Learning… ) ","date":"2022-06-15","objectID":"/about/:1:7","tags":null,"title":"This is Jallen ! 😎","uri":"/about/"},{"categories":null,"content":" Backend ( Learning… ) ","date":"2022-06-15","objectID":"/about/:1:8","tags":null,"title":"This is Jallen ! 😎","uri":"/about/"},{"categories":null,"content":"独立项目 ","date":"2022-06-15","objectID":"/about/:2:0","tags":null,"title":"This is Jallen ! 😎","uri":"/about/"},{"categories":null,"content":" React 搭建的电子商务平台全栈项目 🖥 项目地址：GitHub 源码 ｜ Demo 🔧 涉及工具: 页面搭建: React Basics, React Router, React Hooks, React Performance, React Suspense + React Lazy, React Design Patterns, Styled-Components 状态管理: Context API 状态管理优化: Redux, Redux thunk, Redux Saga, Asynchronous Redux 数据库: Firebase 测试工具: Testing with Jest, Enzyme and Snapshot testing 其他工具: Stripe API, GraphQL, Apollo, PWAs, Persistance + Session Storage, State Normalization ","date":"2022-06-15","objectID":"/about/:2:1","tags":null,"title":"This is Jallen ! 😎","uri":"/about/"},{"categories":null,"content":" Vue ( … ) … ","date":"2022-06-15","objectID":"/about/:2:2","tags":null,"title":"This is Jallen ! 😎","uri":"/about/"},{"categories":null,"content":" JavaScript ( … ) … ","date":"2022-06-15","objectID":"/about/:2:3","tags":null,"title":"This is Jallen ! 😎","uri":"/about/"},{"categories":null,"content":"社区贡献 ","date":"2022-06-15","objectID":"/about/:3:0","tags":null,"title":"This is Jallen ! 😎","uri":"/about/"},{"categories":null,"content":" 尚无 ","date":"2022-06-15","objectID":"/about/:3:1","tags":null,"title":"This is Jallen ! 😎","uri":"/about/"},{"categories":["other"],"content":"OpenWrt + OpenClash 安装步骤 ","date":"2020-05-03","objectID":"/openwrt_install/:0:0","tags":[""],"title":"OpenWrt、OpenClash 安装教程","uri":"/openwrt_install/"},{"categories":["other"],"content":"溯源 由于软路由 LEDE/OpenWrt 系统的问题日渐显现，改刷 OpenWrt。 在此记录安装步骤。 ","date":"2020-05-03","objectID":"/openwrt_install/:1:0","tags":[""],"title":"OpenWrt、OpenClash 安装教程","uri":"/openwrt_install/"},{"categories":["other"],"content":"准备 ","date":"2020-05-03","objectID":"/openwrt_install/:2:0","tags":[""],"title":"OpenWrt、OpenClash 安装教程","uri":"/openwrt_install/"},{"categories":["other"],"content":"工具软件 physdiskwrite（系统写入工具） PuTTY（SSH 远程工具） WinSCP（远程文件管理工具） 老毛桃（启动盘制作工具） 任何启动盘制作工具均可 ","date":"2020-05-03","objectID":"/openwrt_install/:2:1","tags":[""],"title":"OpenWrt、OpenClash 安装教程","uri":"/openwrt_install/"},{"categories":["other"],"content":"软路由固件包 恩山论坛（OpenWrt 可自行编译、也可找编译好的包） ","date":"2020-05-03","objectID":"/openwrt_install/:2:2","tags":[""],"title":"OpenWrt、OpenClash 安装教程","uri":"/openwrt_install/"},{"categories":["other"],"content":"Clash 项目地址 OpenClash 项目地址 Luci For Clash 项目地址 ","date":"2020-05-03","objectID":"/openwrt_install/:2:3","tags":[""],"title":"OpenWrt、OpenClash 安装教程","uri":"/openwrt_install/"},{"categories":["other"],"content":"步骤 ","date":"2020-05-03","objectID":"/openwrt_install/:3:0","tags":[""],"title":"OpenWrt、OpenClash 安装教程","uri":"/openwrt_install/"},{"categories":["other"],"content":"安装 OpenWrt 先自行制作 PE 启动盘，可用老毛桃，也可采用其他方式。 下载好 physdiskwrite 工具、OpenWrt 镜像安装包，并全部拷贝至启动盘根目录。 将软路由连接显示器、键鼠、U 盘。 设置 U 盘启动，进入 PE 系统，并在分区管理工具内删除软路由固态硬盘所有分区并保存（不要设置新的分区，保持整个磁盘空闲状态）。 打开 cmd 命令，输入 PE 启动盘所在盘符号（以下是范例）： U: 输入以下代码（XXX 替换为 OpenWrt 的安装包全名）： physdiskwrite -u XXXX.img 输入软路由的磁盘数字（一般为 0）并确认安装： 0 #之后按回车键 y #之后按回车键（确认安装） 安装完毕后拔掉 U 盘并重启软路由，同时设置软路由硬盘启动。 等待屏幕不再滚动代码后，按回车键 输入：vi /etc/config/network 自行更改 LAN 口 IP 地址和 WAN、LAN 的分配网口（涉及 Linux 基础，此处不再赘述，不懂可以略过） 连接 LAN 口到计算机，浏览器地址栏输入更改后的 IP，如果略过了上方引言步骤，此处 IP 地址只能输入 192.168.1.1，初始密码是：password。 自行设置软路由的网络。 ","date":"2020-05-03","objectID":"/openwrt_install/:3:1","tags":[""],"title":"OpenWrt、OpenClash 安装教程","uri":"/openwrt_install/"},{"categories":["other"],"content":"安装依赖 打开 PuTTY，输入软路由的 IP，选择 SSH 模式，进入。 安装依赖： cd /tmp opkg update opkg install luci opkg install luci-base opkg install iptables opkg install dnsmasq-full opkg install coreutils opkg install coreutils-nohup opkg install bash opkg install curl opkg install jsonfilter opkg install ca-certificates opkg install ipset opkg install ip-full opkg install iptables-mod-tproxy opkg install kmod-tun #TUN模式 opkg install luci-compat 打开 WinSCP，文件协议选择 SCP，输入软路由的 IP，输入用户名密码，进入。 找到 OpenClash 的 ipk 安装包，右键上传到软路由的 tmp 文件夹内。 回到命令行，输入（xxx 替换为安装包全名）： opkg install xxx.ipk 回到软路由页面，刷新，看见服务选项卡出现 OpenClash 表示安装成功。 ","date":"2020-05-03","objectID":"/openwrt_install/:4:0","tags":[""],"title":"OpenWrt、OpenClash 安装教程","uri":"/openwrt_install/"},{"categories":["other"],"content":"总结 Luci for Clash 安装方法类似，不再赘述。 Clash 安装后具体用法请参考具体配置说明：OpenClash wiki。 ","date":"2020-05-03","objectID":"/openwrt_install/:5:0","tags":[""],"title":"OpenWrt、OpenClash 安装教程","uri":"/openwrt_install/"},{"categories":["other"],"content":"附录 lhie1 Rules 项目地址 Clash Config Builder Clash Config Builder wiki ","date":"2020-05-03","objectID":"/openwrt_install/:6:0","tags":[""],"title":"OpenWrt、OpenClash 安装教程","uri":"/openwrt_install/"},{"categories":["essay"],"content":"读远藤周作「沉默」有感 ","date":"2020-03-07","objectID":"/private_book_power/:0:0","tags":[""],"title":"「权利与荣耀」摘录","uri":"/private_book_power/"},{"categories":["essay"],"content":"序 近日读完格雷厄姆「权利与荣耀」，主旨意味颇深，对很多地方尚无法深刻理解，故无法动笔写下感悟。便将摘录记录成文，以作分享。 ","date":"2020-03-07","objectID":"/private_book_power/:1:0","tags":[""],"title":"「权利与荣耀」摘录","uri":"/private_book_power/"},{"categories":["essay"],"content":"正文摘录 ","date":"2020-03-07","objectID":"/private_book_power/:2:0","tags":[""],"title":"「权利与荣耀」摘录","uri":"/private_book_power/"},{"categories":["essay"],"content":"1 你会眼睁睁地看着它轻率地冲上一座断桥，一条废弃的车道，一头冲进未来六七十年战栗惊恐的一生。他闭上眼睛——他是个快活的人——又哼唱起一首歌来。 ","date":"2020-03-07","objectID":"/private_book_power/:2:1","tags":[""],"title":"「权利与荣耀」摘录","uri":"/private_book_power/"},{"categories":["essay"],"content":"2 他们已经习惯于小孩夭折的事，可是对世界其他地方早已熟知的一件事他们却还没有习惯，那就是希望破灭。 ","date":"2020-03-07","objectID":"/private_book_power/:2:2","tags":[""],"title":"「权利与荣耀」摘录","uri":"/private_book_power/"},{"categories":["essay"],"content":"3 他想到自己生命即将终结，而孩子却还要活下去。如果他看到孩子长大以后，在她开始堕落的岁月里越来越像自己，像感染上肺病似的也染上他自己的毛病，那他可真要下地狱了……他仰面躺在床上，转过头，避开越来越暗的一点光亮。 ","date":"2020-03-07","objectID":"/private_book_power/:2:3","tags":[""],"title":"「权利与荣耀」摘录","uri":"/private_book_power/"},{"categories":["essay"],"content":"4 一个人只要活着，就必须保留一件什么能使他在感情上回忆往昔的旧物。至于这样做是否会引起危险，那是只有生活于相对安全中的人才去考虑的。 ","date":"2020-03-07","objectID":"/private_book_power/:2:4","tags":[""],"title":"「权利与荣耀」摘录","uri":"/private_book_power/"},{"categories":["essay"],"content":"5 他坐下来等着，混血儿许久许久也没有回来。他的一只手里仍然攥着那个从扔掉的皮包里取出的纸团——一个人只要活着，就必须保留一件什么能使他在感情上回忆往昔的旧物。至于这样做是否会引起危险，那是只有生活于相对安全中的人才去考虑的。 ","date":"2020-03-07","objectID":"/private_book_power/:2:5","tags":[""],"title":"「权利与荣耀」摘录","uri":"/private_book_power/"},{"categories":["essay"],"content":"6 他想，这个人如果能过上一年吃穿不愁的日子，灵魂很可能就因此得救。任何处境只要把它反转过来看一下，那些细小的荒诞和矛盾就都清清楚楚地显露出来了。他自己就是这样： 他认为自己已经走入绝境，但从绝望中又产生了纯净的灵魂和对人类的爱。虽然还不是最无私的爱，但毕竟是一种爱。 ","date":"2020-03-07","objectID":"/private_book_power/:2:6","tags":[""],"title":"「权利与荣耀」摘录","uri":"/private_book_power/"},{"categories":["essay"],"content":"7 “最好是没有信仰，做个勇敢的人。我明白你说的意思了。当然了，如果你认为这个世界上根本就没有总督或者警察局长，明明这是座监狱，你却认定它是座花园，当然你会很勇敢的。但是如果我们发现监狱就是监狱，总督也实实在在坐镇在上面那个广场上，我们能不能表现出一两个钟头的勇敢无畏，意义就不大了。” ","date":"2020-03-07","objectID":"/private_book_power/:2:7","tags":[""],"title":"「权利与荣耀」摘录","uri":"/private_book_power/"},{"categories":["essay"],"content":"8 从她疲惫而又紧张的说话声调看，很像一个虔诚的女教徒。这些人痴迷于圣像。为什么不把那些画像烧掉？信仰并不需要图像……他严厉地说：“啊，我还不只是个酒鬼。”他过去就一直为这些虔诚的女教徒担心。她们很像一些政治家，靠制作种种幻景活着。他替她们感到害怕。在一个自鸣得意、毫无同情与怜悯的国度里，这些女教徒常常为自己的信仰把命送掉。她们对“善”的理解过于感情化。他觉得自己如果能够做到的话，有责任把她们从这种感伤的心态中解脱出来……他又用严厉的语调说：“我有一个孩子。” ","date":"2020-03-07","objectID":"/private_book_power/:2:8","tags":[""],"title":"「权利与荣耀」摘录","uri":"/private_book_power/"},{"categories":["essay"],"content":"9 有那么多美。圣人们总说忍受苦难也有美的一面。当然了，你我都不是圣人。对我们来说，受苦受罪是丑恶的。臭味，挤轧，苦不堪言。可是在那个角落里，就有美的存在——对他们俩来说。要想用圣徒的眼睛观察事物，需要很大的学问。圣人有自己的精细的审美感，可以鄙视像他们这样人的粗俗无知的享乐。但我们就没有资格这样做。 ","date":"2020-03-07","objectID":"/private_book_power/:2:9","tags":[""],"title":"「权利与荣耀」摘录","uri":"/private_book_power/"},{"categories":["essay"],"content":"10 天使因骄傲而堕落，骄傲是万恶之首。我就是总认为别人都走了，我留下来非常了不起。后来我又认为我能为自己制定礼规实在伟大。我不再守斋，不再每天做弥撒。祈祷我也忽略了。有一天我喝酒喝得烂醉，又因为非常孤寂——我想你了解那是怎么回事，我就有了一个孩子。这一切都是骄傲所致。因为留下来而感觉骄傲。我对教徒没什么用，但是我留了下来。至少可以说用处不大。最后落得一个月也不到一百人从我这里领圣体。要是我走了，我至少能多给天主十倍于这个数目。这是我犯的错误——只因为认为某件事困难、危险，就……” ","date":"2020-03-07","objectID":"/private_book_power/:2:10","tags":[""],"title":"「权利与荣耀」摘录","uri":"/private_book_power/"},{"categories":["essay"],"content":"11 心是个很不可靠的野兽。理智同样也是，但它不讲爱。爱心。当一位少女投了水，或者一个小孩被掐死了，心就不停地说爱，用爱拯救世人。 ","date":"2020-03-07","objectID":"/private_book_power/:2:11","tags":[""],"title":"「权利与荣耀」摘录","uri":"/private_book_power/"},{"categories":["essay"],"content":"12 我不像你想像中那样虚伪，你想我为什么在讲道坛上向人们宣讲，如果死亡猝然降临，他们就有被罚进地狱去的危险？我不是在给他们讲我自己也不相信的童话故事，我不知道天主有多么深厚的怜悯心。我也不知道在天主的眼中，人心多么邪恶。我只知道一件事： 如果在这个国家里有一个人被罚过下地狱的话，我就也必将罚入地狱。 ","date":"2020-03-07","objectID":"/private_book_power/:2:12","tags":[""],"title":"「权利与荣耀」摘录","uri":"/private_book_power/"},{"categories":["code"],"content":"Vim 三种模式 命令模式、编辑模式（输入模式）、末行模式（尾行模式） 命令模式：在该模式下是不能对文件直接编辑，可以输入快捷键进行一些操作（删除行，复制行，移动光标，粘贴等等），打开文件之后默认进入的模式。 编辑模式：在该模式下可以对文件的内容进行编辑。 末行模式：可以在末行输入命令来对文件进行操作（搜索、替换、保存、退出、撤销、高亮等等）。 ","date":"2019-07-04","objectID":"/vim/:0:0","tags":[""],"title":"Vim 常用语句","uri":"/vim/"},{"categories":["code"],"content":"Vim的打开文件的方式 #vim \u003cpath\u003e //打开指定的文件 #vim +number \u003cpath\u003e //打开指定的文件，并将光标移动到指定行 #vim +/keyword \u003cpath\u003e //打开指定的文件，并高亮显示关键词 #vim \u003cpath1\u003e \u003cpath2\u003e \u003cpath3\u003e //同时打开多个文件 ","date":"2019-07-04","objectID":"/vim/:1:0","tags":[""],"title":"Vim 常用语句","uri":"/vim/"},{"categories":["code"],"content":"命令模式 ","date":"2019-07-04","objectID":"/vim/:2:0","tags":[""],"title":"Vim 常用语句","uri":"/vim/"},{"categories":["code"],"content":"光标移动 光标移动到行首 按键：shift + 6 或 ^ 光标移动到行尾 按键：shift + 4 或 $ 光标移动到首行 按键：gg 光标移动到末行 按键：G 翻屏 向上翻屏：按键 ctrl + b（before）或 PgUp 向下翻屏：按键 ctrl + f（after）或 PgDn ","date":"2019-07-04","objectID":"/vim/:2:1","tags":[""],"title":"Vim 常用语句","uri":"/vim/"},{"categories":["code"],"content":"复制操作 复制光标所在行 按键：yy 粘贴：在想要粘贴的地方按下p键 以光标所在行为准（包含当前行），向下复制指定的行数 按键：数字yy 可视化复制 按键：ctrl + v（可视块）或 V（可视行）或 v（可视），然后按下 ↑↓←→ 方向键来选中需要复制的区块，按下 y 键进行复制，最后按下 p 键粘贴 ","date":"2019-07-04","objectID":"/vim/:2:2","tags":[""],"title":"Vim 常用语句","uri":"/vim/"},{"categories":["code"],"content":"剪切/删除 剪切/删除光标所在行 按键：dd （删除之后下一行上移） 注意：dd 严格意义上说是剪切命令，但是如果剪切了不粘贴就是删除的效果。 剪切/删除光标所在行为准（包含当前行），向下删除/剪切指定的行 按键：数字dd（删除之后下一行上移） 剪切/删除光标所在的当前行之后的内容，但是删除之后下一行不上移 按键：D（删除之后当前行会变成空白行） 可视化删除 按键：ctrl + v（可视块）或 V（可视行）或 v（可视），上下左右移动，按下 D 表示删除选中行，d 表示删选中块 撤销/恢复 撤销：输入:u（不属于命令模式）或者 u（undo） 恢复：ctrl + r 恢复（取消）之前的撤销操作 ","date":"2019-07-04","objectID":"/vim/:2:3","tags":[""],"title":"Vim 常用语句","uri":"/vim/"},{"categories":["code"],"content":"光标的快速移动 快速将光标移动到指定的行 按键：数字G 以当前光标为准向上/向下移动 n 行 按键：数字↑，数字↓ 以当前光标为准向左/向右移动 n 字符 按键：数字←，数字→ 末行模式下的快速移动方式：移动到指定的行 按键：输入英文 “:”，其后输入行数数字，按下回车 ","date":"2019-07-04","objectID":"/vim/:2:4","tags":[""],"title":"Vim 常用语句","uri":"/vim/"},{"categories":["code"],"content":"末行模式 进入方式：由命令模式进入，按下 : 或者 /（表示查找） 即可进入 退出方式： a. 按下esc b. 连按2次esc键 c. 删除末行全部输入字符 ","date":"2019-07-04","objectID":"/vim/:3:0","tags":[""],"title":"Vim 常用语句","uri":"/vim/"},{"categories":["code"],"content":"保存操作（write） :w //保存文件 :w \u003cpath\u003e //另存为 ","date":"2019-07-04","objectID":"/vim/:3:1","tags":[""],"title":"Vim 常用语句","uri":"/vim/"},{"categories":["code"],"content":"退出（quit） :q //退出文件 ","date":"2019-07-04","objectID":"/vim/:3:2","tags":[""],"title":"Vim 常用语句","uri":"/vim/"},{"categories":["code"],"content":"保存并退出 :wq //保存并且退出 ","date":"2019-07-04","objectID":"/vim/:3:3","tags":[""],"title":"Vim 常用语句","uri":"/vim/"},{"categories":["code"],"content":"强制（!） :q! //表示强制退出，刚才做的修改操作不做保存 ","date":"2019-07-04","objectID":"/vim/:3:4","tags":[""],"title":"Vim 常用语句","uri":"/vim/"},{"categories":["code"],"content":"调用外部命令（了解） :! //外部命令 ","date":"2019-07-04","objectID":"/vim/:3:5","tags":[""],"title":"Vim 常用语句","uri":"/vim/"},{"categories":["code"],"content":"搜索/查找 /keyword N/n //在搜索结果中切换上/下一个结果（next） :nohl //取消高亮（no highlight） ","date":"2019-07-04","objectID":"/vim/:3:6","tags":[""],"title":"Vim 常用语句","uri":"/vim/"},{"categories":["code"],"content":"替换 :s/keyword/newword //替换光标所在行的第一处符合条件的内容 :s/keyword/newword/g //替换光标所在行的全部符合条件的内容 :%s/keyword/newword //替换整个文档中每行第一个符合条件的内容 :%s/keyword/newword/g //替换整个文档的符合条件的内容 % //表示整个文件 g //表示全局（global） ","date":"2019-07-04","objectID":"/vim/:3:7","tags":[""],"title":"Vim 常用语句","uri":"/vim/"},{"categories":["code"],"content":"显示行号（临时） :set nu //number :set nonu //取消显示 使用vim同时打开多个文件，在末行模式下进行切换文件 :files //查看当前已经打开的文件名称 %a：a=active //表示当前正在打开的文件 # //表示上一个打开的文件 ","date":"2019-07-04","objectID":"/vim/:3:8","tags":[""],"title":"Vim 常用语句","uri":"/vim/"},{"categories":["code"],"content":"切换文件的方式 a. 指定切换文件的名称 :open 已经打开的文件名 b. 通过其他命令来切换上一个文件/下一个文件 :bn //切换到下一个文件（back next） :bp //切换到上一个文件（back prev） ","date":"2019-07-04","objectID":"/vim/:3:9","tags":[""],"title":"Vim 常用语句","uri":"/vim/"},{"categories":["code"],"content":"编辑模式 退出方式：按下esc键 ","date":"2019-07-04","objectID":"/vim/:4:0","tags":[""],"title":"Vim 常用语句","uri":"/vim/"},{"categories":["Android"],"content":"安卓手机刷入 GSI 镜像教程","date":"2019-06-10","objectID":"/android_flash-gsi-rom/","tags":[""],"title":"安卓手机刷入 GSI 镜像教程","uri":"/android_flash-gsi-rom/"},{"categories":["Android"],"content":"从理论上来说，刷入某个 GSI，你的手机就会摇身一变，从一个系统切换到了另一个系统。 ","date":"2019-06-10","objectID":"/android_flash-gsi-rom/:0:0","tags":[""],"title":"安卓手机刷入 GSI 镜像教程","uri":"/android_flash-gsi-rom/"},{"categories":["Android"],"content":"一、gsi 镜像包介绍 GSI 的全称是 Generic System Image，翻译过来就是「通用系统镜像」，这个概念来源于 Project Treble。 自从 Android 8 引入 Project Treble 后，手机的系统文件和底层的厂商硬件驱动开始分离存放，更新系统时只需要更新系统文件即可。此项举措意在方便厂商加快 Android 大版本更新的步伐，自然也同样方便了第三方 ROM 的开发和更新，成为了社区开发的一大福音。从理论上来说，刷入某个 GSI，你的手机就会摇身一变，从一个系统切换到了另一个系统。 ","date":"2019-06-10","objectID":"/android_flash-gsi-rom/:1:0","tags":[""],"title":"安卓手机刷入 GSI 镜像教程","uri":"/android_flash-gsi-rom/"},{"categories":["Android"],"content":"二、gsi 镜像通刷包的特点 优点是在机器还没有适配第三方 ROM 的时候，可以提前体验到类原生系统，体验原生系统的流畅简洁以及丰富的自定义。但同样存在不小的问题，由于此类镜像包没有针对具体机型进行优化，所以会存在部分问题，例如小米手机的四角弧度过大，gsi 镜像包刷入后状态栏会有不匹配，显示不完全的可能性以及相机无法拍照，即使可以拍照，相片质量也堪忧。 ","date":"2019-06-10","objectID":"/android_flash-gsi-rom/:2:0","tags":[""],"title":"安卓手机刷入 GSI 镜像教程","uri":"/android_flash-gsi-rom/"},{"categories":["Android"],"content":"三、gsi镜像包的刷入选择 gsi通刷包有很多种选择，也是由不同的国外大神负责维护，下面贴上几乎所有 gsi 通刷包（包括官方和非官方）的集合链接，请各位自行选择，选择包的种类请见下一章节。 点此跳转GitHub ","date":"2019-06-10","objectID":"/android_flash-gsi-rom/:3:0","tags":[""],"title":"安卓手机刷入 GSI 镜像教程","uri":"/android_flash-gsi-rom/"},{"categories":["Android"],"content":"四、gsi镜像包类名的选择（两类） ","date":"2019-06-10","objectID":"/android_flash-gsi-rom/:4:0","tags":[""],"title":"安卓手机刷入 GSI 镜像教程","uri":"/android_flash-gsi-rom/"},{"categories":["Android"],"content":"出厂安卓版本是8.0及以下的手机 第一步 需要下载一个软件 Treble Check 检测，附上谷歌商店和酷安链接。 Treble Check（点击跳转Google play store） Treble Check（点击跳转酷安应用市场） 第二步 打开软件查看检测结果，只有当 Project Treble 通过检测才表明此手机可以刷 gsi 镜像包。接着看第二项 Seamless System Updates，如果显示 A/B 即表明你应该选择的通刷包后缀名为 A/B 或者 AB 。若检测结果显示 A only，即表明你应该选择的通刷包后缀名为 A 或者 A only。 第三步 上网查找你所使用手机的内核名称，例如小米 9 SE 为 arm64 ","date":"2019-06-10","objectID":"/android_flash-gsi-rom/:4:1","tags":[""],"title":"安卓手机刷入 GSI 镜像教程","uri":"/android_flash-gsi-rom/"},{"categories":["Android"],"content":"出厂版本是安卓9.0版本的手机（第二步关键） 第一步 同上第一步，需要检测 Project Treble 是否支持 第二步 此处注意！凡是出厂版本为 9.0 的手机，无论 Seamless System Updates 检测结果如何，通刷包的版本一律选择 A/B 或 AB。 第三步 同上第三步。 ","date":"2019-06-10","objectID":"/android_flash-gsi-rom/:4:2","tags":[""],"title":"安卓手机刷入 GSI 镜像教程","uri":"/android_flash-gsi-rom/"},{"categories":["Android"],"content":"五、刷机步骤 ","date":"2019-06-10","objectID":"/android_flash-gsi-rom/:5:0","tags":[""],"title":"安卓手机刷入 GSI 镜像教程","uri":"/android_flash-gsi-rom/"},{"categories":["Android"],"content":"自行完成 自行刷入第三方 rec 自行下载好 gsi 解压后得到 img 镜像包 ","date":"2019-06-10","objectID":"/android_flash-gsi-rom/:5:1","tags":[""],"title":"安卓手机刷入 GSI 镜像教程","uri":"/android_flash-gsi-rom/"},{"categories":["Android"],"content":"刷机前注意 使用官方稳定ROM作为底包，不要使用开发版和任何官改版。 ","date":"2019-06-10","objectID":"/android_flash-gsi-rom/:5:2","tags":[""],"title":"安卓手机刷入 GSI 镜像教程","uri":"/android_flash-gsi-rom/"},{"categories":["Android"],"content":"开始刷机 方法一：Rec 刷入 第一步 手机备份好重要资料后，重启至第三方 recovery TWRP, 并在高级中选择取消强制加密并选中两项后确认。 第二步 主页面选择清除，滑动下方滑块进行双清即可，不要自作多情，双清足够。 第三步 返回主页面，选择安装后，点击右下方刷入镜像，找到拷贝到手机里的img镜像包，选择后刷入System镜像分区内，等待结束后再次双清即可使用。 方法二：fastboot 刷入 此方法仅对小米手机有效 第一步 网络下载符合所使用机型的 vbmeta.img, 并将其拷贝到 platform-tools 文件夹内 下载 GSI 包 (choose A/B one) 第二步 adb依次输入以下命令 {% highlight ruby %} fastboot –disable-verity –disable-verification flash vbmeta vbmeta.img fastboot flash system fastboot -w fastboot reboot {% endhighlight %} ","date":"2019-06-10","objectID":"/android_flash-gsi-rom/:5:3","tags":[""],"title":"安卓手机刷入 GSI 镜像教程","uri":"/android_flash-gsi-rom/"},{"categories":["Android"],"content":"六、修复 GSI 可能存在的基础问题 ","date":"2019-06-10","objectID":"/android_flash-gsi-rom/:6:0","tags":[""],"title":"安卓手机刷入 GSI 镜像教程","uri":"/android_flash-gsi-rom/"},{"categories":["Android"],"content":"修复自动亮度失效 下载 framework-res__auto_generated_rro.apk 用re管理器将其复制到 vendor/overlay 文件夹 修改 overlay 文件夹权限为 rwxr-xr-x 手机打开 Termux 输入以下命令 {% highlight ruby %} mount -o remount -w /vendor chcon u:object_r:vendor_overlay_file:s0 /vendor/overlay;chcon u:object_r:vendor_overlay_file:s0 /vendor/overlay/framework-res__auto_generated_rro.apk {% endhighlight %} ","date":"2019-06-10","objectID":"/android_flash-gsi-rom/:6:1","tags":[""],"title":"安卓手机刷入 GSI 镜像教程","uri":"/android_flash-gsi-rom/"},{"categories":["Android"],"content":"修复扬声器失真 手机下载 Root Explorer 删除两个文件夹 /system/vendor/lib/soundfx /system/vendor/lib64/soundfx 改变 vendor 文件夹的权限为 rw-r--r-- 重启手机 ","date":"2019-06-10","objectID":"/android_flash-gsi-rom/:6:2","tags":[""],"title":"安卓手机刷入 GSI 镜像教程","uri":"/android_flash-gsi-rom/"},{"categories":["Android"],"content":"修复屏幕状态栏圆角 adb 输入以下命令(最后的数字根据自己喜好任意修改): {% highlight ruby %} adb shell settings put secure sysui_rounded_content_padding 20 {% endhighlight %} ","date":"2019-06-10","objectID":"/android_flash-gsi-rom/:6:3","tags":[""],"title":"安卓手机刷入 GSI 镜像教程","uri":"/android_flash-gsi-rom/"},{"categories":["Android"],"content":"七、系统的使用 完成以上步骤即可完成刷机工作，如过程中遇到问题，可以去负责维护相关镜像系统的GitHub反馈Issue。 ","date":"2019-06-10","objectID":"/android_flash-gsi-rom/:7:0","tags":[""],"title":"安卓手机刷入 GSI 镜像教程","uri":"/android_flash-gsi-rom/"},{"categories":["Android"],"content":"刷机及Root专用教程","date":"2019-06-10","objectID":"/android_flash_android/","tags":[""],"title":"刷机及 Root 教程","uri":"/android_flash_android/"},{"categories":["Android"],"content":"刷机前准备 刷机前请解锁Bootloader，小米机型解锁链接如下： 此处跳转小米手机解锁页面 成功解锁后，卡刷爱好者请下载专版 TWRP，线刷爱好者请备好 adb 环境。 （类原生系统需要）下载 Firmware 最新底包，根据你目前所在系统版本选择合适的底包。 下载刷机包，存在电脑里，然后务必退出小米（谷歌）账号! ","date":"2019-06-10","objectID":"/android_flash_android/:1:0","tags":[""],"title":"刷机及 Root 教程","uri":"/android_flash_android/"},{"categories":["Android"],"content":"刷机步骤 ","date":"2019-06-10","objectID":"/android_flash_android/:2:0","tags":[""],"title":"刷机及 Root 教程","uri":"/android_flash_android/"},{"categories":["Android"],"content":"卡刷教程 第一步 刷入 TWRP，在 高级 中选择 签名Boot 从而替换官方 Recovery，首先点击 清除 选项，如果刷入 MIUI 国际版或 MIUI 官改版请直接滑动下方滑块（三清）即可，如果刷入第三方类原生 ROM 建议选择四清，如需自定义清理请点击 高级选项。 双清：勾选 Dalvik/Art cache、Cache 双清适用于同一个 ROM 直接升级，刷内核或者补丁包，例如从 V6.2 升级到 V6.3 时，双清可以清理缓存，但是又不至于把用户数据和应用程序清除。 三清：勾选 Dalvik/Art cache、Cache、Data 当你不确定你下载的那个包是否真的可用时，建议选这个，万一下载的 ROM 无法刷入，不至于开不了机（如果你的手机里有另外一个绝对可以刷入的包做保底的话，忽略三清用四清或者两清）。 四清：勾选 Dalvik/Art cache、System、Data、Cache 一般在刷入第三方 ROM 之前都应该进行四清，这样可以避免刷完ROM之后出现无法进入系统，或者在使用某些设置和 APP 时出现问题。四清是数据清除最彻底的方式，该操作会将手机原有的系统和其他数据全部清空。所以在操作前如有必要请先进行相应的数据备份。 第二步 进入 清除 选项，选择 格式化data，输入 yes 即可。若格式化之后手机连接电脑无法识别磁盘，请重启至 TWRP 即可连接，或者使用 OTG 拓展连接U盘刷机。 第三步 MIUI 国际及官改 回到主页面，此时用 USB 线将手机连接至电脑，将刷机包、Magisk 卡刷包拷贝至内置储存，拷贝结束后点击 安装，找到刷机包，勾选 刷机结束后重启手机，刷入即可。 第三方类原生 ROM 回到主页面，此时用 USB 线将手机连接至电脑，将刷机包、底包、Magisk 卡刷包、GApps 卡刷包（microG 卡刷包）拷贝至内置储存，拷贝结束后点击 安装，找到底包，两项均不勾选刷入，成功后刷入第三方卡刷包（切记此时不要重启），接着： 若刷入 microG，请移步 安装 microG 步骤。 若刷入 GApps： 请先将手机重启至系统，然后重新进入到 TWRP。 进入 清除，选择 高级选项，勾选 system，选择 重新调整空间。 回到主页面，选择 挂载，勾选 system 以及 将system挂载为已读。 选择 GApps 卡刷包刷入后，双清进入系统即可。 第四步（Root，无需求者可忽略） 无论任何时候都可以 Root，即使手机用了很长一段时间也可以，不必担心数据会被清空。 事先下载好 Magisk 刷机包文件，拷入手机内存。选择 挂载System分区 和 挂载system分区为只读 后，刷入 Magisk 卡刷包即可。成功后，重启进入手机系统。 ","date":"2019-06-10","objectID":"/android_flash_android/:2:1","tags":[""],"title":"刷机及 Root 教程","uri":"/android_flash_android/"},{"categories":["Android"],"content":"线刷教程有待补充~ ","date":"2019-06-10","objectID":"/android_flash_android/:2:2","tags":[""],"title":"刷机及 Root 教程","uri":"/android_flash_android/"},{"categories":["Android"],"content":"谷歌框架开机验证 ","date":"2019-06-10","objectID":"/android_flash_android/:3:0","tags":[""],"title":"刷机及 Root 教程","uri":"/android_flash_android/"},{"categories":["Android"],"content":"方法一 连接可翻墙网络。 ","date":"2019-06-10","objectID":"/android_flash_android/:3:1","tags":[""],"title":"刷机及 Root 教程","uri":"/android_flash_android/"},{"categories":["Android"],"content":"方法二 无可翻墙网络时，不插入 SIM 卡，开机界面刚显示时迅速开启飞行模式，切勿连接WiFi。 ","date":"2019-06-10","objectID":"/android_flash_android/:3:2","tags":[""],"title":"刷机及 Root 教程","uri":"/android_flash_android/"},{"categories":["Android"],"content":"microG 官方文档翻译","date":"2019-05-08","objectID":"/android_flash_microg/","tags":[""],"title":"microG 简介及安装","uri":"/android_flash_microg/"},{"categories":["Android"],"content":"microG 介绍 越来越多的 Library 和 API 仅适用于预先安装了各种 Google 应用的手机，从而有效地将第三方应用锁定到 Google 生态系统。出于这些原因，Android 被描述为“可远观而不可亵玩”的开放式。 此时microG项目诞生了——谷歌专有核心库和应用程序的免费软件克隆。 用户获得了扩展的应用程序支持，可以减少或监控发送给 Google 的数据，旧款手机可以提高电池寿命。microG 不仅用于真实设备，还取代了测试模拟器中的 Google 工具，甚至用于虚拟移动基础设施。 ","date":"2019-05-08","objectID":"/android_flash_microg/:1:0","tags":[""],"title":"microG 简介及安装","uri":"/android_flash_microg/"},{"categories":["Android"],"content":"组件 ","date":"2019-05-08","objectID":"/android_flash_microg/:2:0","tags":[""],"title":"microG 简介及安装","uri":"/android_flash_microg/"},{"categories":["Android"],"content":"Service Core (GmsCore) 是一个库应用程序，给需通过谷歌服务或 Google Maps Android API（v2）才可运行的应用程序所需的功能特性。 概览 microG GmsCore 是 Google Play 服务框架的免费开源实现方式。它允许调用专有 Google API 的应用程序在基于 AOSP 的 Rom（如 Replicant 和 LineageOS）上运行。作为闭源 Google Apps（GAPPS）的替代品，它是在享受 Android 核心功能的同时保护隐私的强大工具。 特征 选择加入 Google 服务并扩展应用程序支持 (Opt-in to Google Services and extend application support) 在线/离线定位服务 (On-/Offline location service) 易于使用电池，内存和CPU (Easy on battery, memory and CPU) 没有多余软件 (No bloatware) 适用于真实设备，测试模拟器和虚拟移动基础设施 (Works on real devices, test emulators and virtual mobile infrastructure) 免费且开源（Apache 2.0许可） (Free and open source (Apache 2.0 licensed)) 系统要求 需要伪装签名，使 GmsCore 可以假装官方 Play 服务使其存在于需要调用 Google API 的应用程序。 签名伪装 您需要一个支持签名伪装的 Rom。一些自定义 Rom 需要安装补丁并且在手机内完成部分操作设置以支持。 CarbonROM MicroG will ask for Signature Spoofing authorization OmniROM 5 Must be enabled at the bottom of the developer settings first. OmniROM 6/7 Must be enabled in Settings\u003eApps\u003eAdvanced(gear icon)\u003eAdditional permissions\u003eSpoof signature. MarshRom Must be enabled in Settings\u003eApps\u003eAdvanced(gear icon)\u003eAdditional permissions\u003eSpoof signature. AospExtended Must be enabled in Settings\u003eApps\u003eAdvanced(gear icon)\u003eApp Permissions\u003eSpoof package signature. LineageOS bundled with microG 其他自定义Rom的支持列表 如果安装了Xposed Framework，以下模块可以开启签名伪装：FakeGApps 还可以通过 NanoDroid-patcher 修补自定义 Rom，无需任何计算机操作,它将自动修补每次更新的 Rom。 如果你已Root，但没有使用Xposed，你可以尝试使用 Needle by moosd（或 fork Tingle by ale5000）或 Haystack by Lanchon 修补你已经安装的 Rom。Haystack可以选择添加一个简单的UI来控制伪装，它类似于 OmniROM 5 的伪装方式。请注意，所有3个修补程序都要求修补的是 Rom 不是 odexed。 注意：microG GmsCore无法安装在拥有Google服务的设备上。 原文详情 模块 GmsCore 包括统一网络位置提供程序模块（UnifiedNlp），用于处理对 Google 网络位置提供程序的应用程序调用。它依赖于必须单独安装的位置和地址查找后端。 参阅 对于完整的 microG 设置，可以安装PlayStore替换应用程序以及服务框架代理（GsfProxy）模块，以提供Google的推送消息服务。另请参见安装。 ","date":"2019-05-08","objectID":"/android_flash_microg/:2:1","tags":[""],"title":"microG 简介及安装","uri":"/android_flash_microg/"},{"categories":["Android"],"content":"Services Framework Proxy (GsfProxy) 是一个辅助实用程序，允许为 Google Cloud to Device Messaging（C2DM）开发的应用程序使用 Gms Core 内附带的 Google Cloud Messaging Service。 同上GmsCore ","date":"2019-05-08","objectID":"/android_flash_microg/:2:2","tags":[""],"title":"microG 简介及安装","uri":"/android_flash_microg/"},{"categories":["Android"],"content":"Unified Network Location Provider (UnifiedNlp) 是一个库，可为使用 Google 网络位置的应用提供基于 Wi-Fi 和移动数据的地理定位。它包含在 GmsCore 中，但也可以在大多数 Android 系统上独立运行。 详情 ","date":"2019-05-08","objectID":"/android_flash_microg/:2:3","tags":[""],"title":"microG 简介及安装","uri":"/android_flash_microg/"},{"categories":["Android"],"content":"Maps API (mapsv1) 是一个系统库，提供与现已弃用的 Google Maps API（v1）相同的功能。 详情 ","date":"2019-05-08","objectID":"/android_flash_microg/:2:4","tags":[""],"title":"microG 简介及安装","uri":"/android_flash_microg/"},{"categories":["Android"],"content":"下载 提供了从 microG 项目下载 APK 文件索引。对于非APK组件，请参阅相应的文档。 ","date":"2019-05-08","objectID":"/android_flash_microg/:3:0","tags":[""],"title":"microG 简介及安装","uri":"/android_flash_microg/"},{"categories":["Android"],"content":"F-Droid存储库 下载和更新 microG 项目组件的最佳方法是使用 F-Droid 存储库。它目前为 GmsCore 提供稳定的夜间更新以及 GsfProxy 和 FakeStore 发布。 点此跳转下载界面 ","date":"2019-05-08","objectID":"/android_flash_microg/:3:1","tags":[""],"title":"microG 简介及安装","uri":"/android_flash_microg/"},{"categories":["Android"],"content":"安装 ","date":"2019-05-08","objectID":"/android_flash_microg/:4:0","tags":[""],"title":"microG 简介及安装","uri":"/android_flash_microg/"},{"categories":["Android"],"content":"下载卡刷包 点此下载 NanoDroid-patcher 和 NanoDroid-microG 两个卡刷包。 ","date":"2019-05-08","objectID":"/android_flash_microg/:4:1","tags":[""],"title":"microG 简介及安装","uri":"/android_flash_microg/"},{"categories":["Android"],"content":"第一步 刷入目标第三方 ROM（必须刷入不包含谷歌框架的系统包）。 ","date":"2019-05-08","objectID":"/android_flash_microg/:4:2","tags":[""],"title":"microG 简介及安装","uri":"/android_flash_microg/"},{"categories":["Android"],"content":"第二步（推荐但不必要） 刷入Magisk。 如果安装了 Magisk，NanoDroid 将会被作为模块刷入，否则将会直接安装到/system 分区。 ","date":"2019-05-08","objectID":"/android_flash_microg/:4:3","tags":[""],"title":"microG 简介及安装","uri":"/android_flash_microg/"},{"categories":["Android"],"content":"第三步（无需求可省略） 安装 Kernel 核心。 ","date":"2019-05-08","objectID":"/android_flash_microg/:4:4","tags":[""],"title":"microG 简介及安装","uri":"/android_flash_microg/"},{"categories":["Android"],"content":"第四步 安装 NanoDroid-patcher 卡刷包（时间大约在5到10分钟，请耐心等待。) ","date":"2019-05-08","objectID":"/android_flash_microg/:4:5","tags":[""],"title":"microG 简介及安装","uri":"/android_flash_microg/"},{"categories":["Android"],"content":"第五步 将下载好的 NanoDroid-microG 卡刷包打开，找到 .nanodroid.setup，以文本编辑模式打开，按照如下提示自定义按需设置：（1是开启,0是关闭） nanodroid_microg=1 microg核心，必须开启 nanodroid_gmscore=0 谷歌原版服务框架，如果开启，上面microg要关闭，正常不开启 nanodroid_fdroid=1 开源应用商店，按自己需求开启 nanodroid_apps=1 microg其他软件默认开启 nanodroid_play=1 谷歌原版商店，可以开启 nanodroid_overlay=0 nanodroid_zelda=1 nanodroid_mapsv1=1 地图api，默认开启 nanodroid_init=1 nanodroid_gsync=0 谷歌同步，联系人，chrome等同步，如果在使用谷歌同步要开启 nanodroid_swipe=0 nanodroid_forcesystem=0 nanodroid_nlpbackend=1000 nanodroid_nano=1 nanodroid_bash=1 nanodroid_utils=1 nanodroid_fonts=1 nanodroid_override=0 ","date":"2019-05-08","objectID":"/android_flash_microg/:4:6","tags":[""],"title":"microG 简介及安装","uri":"/android_flash_microg/"},{"categories":["Android"],"content":"第六步 安装 NanoDroid-microG 卡刷包后，重启手机至系统。 ","date":"2019-05-08","objectID":"/android_flash_microg/:4:7","tags":[""],"title":"microG 简介及安装","uri":"/android_flash_microg/"},{"categories":["Android"],"content":"第七步 打开 microG 设置如下： 运行 Self Check 授予缺少的必要权限,并关闭电池优化 启用 Google device registration 启用 Google Cloud Messaging 启用 Google SafetyNet 在 UnifiedNlp Settings 内全部勾选 ","date":"2019-05-08","objectID":"/android_flash_microg/:4:8","tags":[""],"title":"microG 简介及安装","uri":"/android_flash_microg/"}]